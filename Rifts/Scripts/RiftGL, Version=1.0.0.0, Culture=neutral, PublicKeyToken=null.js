/* Generated by JSIL v0.7.9 build 31106. See http://jsil.org/ for more information. */ 
var $asm02 = JSIL.DeclareAssembly("RiftGL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("RiftGL");
JSIL.DeclareNamespace("RiftGL.Extensions");
/* class RiftGL.Extensions.JsonExtention */ 

(function JsonExtention$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.System.Runtime.Serialization.Json.DataContractJsonSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.MemoryStream)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Text.Encoding)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.System.Runtime.Serialization.XmlObjectSerializer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Object")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function JsonExtention_FromJson$b1 (T, json) {
    var serializer = $S00().Construct(T);
    var tempStream = $S01().Construct($S02().CallVirtual("GetBytes", null, $T04().get_Unicode(), json));
    try {
      var result = JSIL.CloneParameter(T, T.$Cast($S03().CallVirtual("ReadObject", null, serializer, tempStream)));
    } finally {
      if (tempStream !== null) {
        $IM00().Call(tempStream, null);
      }
    }
    return result;
  };

  function JsonExtention_ToJson$b1 (T, parent) {
    var serializer = $S00().Construct(T);
    var tempStream = $S04().Construct();
    try {
      $S05().CallVirtual("WriteObject", null, serializer, tempStream, parent);
      var string = $T04().get_Default().GetString(tempStream.ToArray());
    } finally {
      if (tempStream !== null) {
        $IM00().Call(tempStream, null);
      }
    }
    return string;
  };

  JSIL.MakeStaticClass("RiftGL.Extensions.JsonExtention", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "FromJson", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"]), 
      JsonExtention_FromJson$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToJson", 
      new JSIL.MethodSignature($.String, ["!!0"], ["T"]), 
      JsonExtention_ToJson$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

JSIL.DeclareNamespace("RiftGL.Objects");
/* class RiftGL.Objects.Audio */ 

(function Audio$Members () {
  var $, $thisType;
  function Audio__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.Audio", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Audio__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("RiftGL.View");
/* class RiftGL.View.ViewPort */ 

(function ViewPort$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.AttributeCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.UniformCollection)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.Objects.BufferCollection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.RiftGL.Objects.MatrixCollection)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };

  function ViewPort__ctor () {
    $thisType.GLVector3 = JSIL.GlobalNamespace.vec3;
    $thisType.GLMatrix4 = JSIL.GlobalNamespace.mat4;
    $thisType.GLMatrix3 = JSIL.GlobalNamespace.mat3;
  };

  function ViewPort_DrawLighting () {
    var arg_3C6_4 = $T05().Parse($thisType.Document.getElementById("ambientR").value);
    var arg_3C6_5 = $T05().Parse($thisType.Document.getElementById("ambientG").value);
    (this.GL).uniform3f($thisType.Uniforms.AmbientColor, arg_3C6_4, arg_3C6_5, $T05().Parse($thisType.Document.getElementById("ambientB").value));
    var array = JSIL.Array.New($T04(), 3);
    var arg_4EA_0 = array;
    arg_4EA_0[0] = $T05().Parse($thisType.Document.getElementById("lightDirectionX").value);
    var arg_602_0 = array;
    arg_602_0[1] = $T05().Parse($thisType.Document.getElementById("lightDirectionY").value);
    var arg_71A_0 = array;
    arg_71A_0[2] = $T05().Parse($thisType.Document.getElementById("lightDirectionZ").value);
    var lightingDirection = array;
    $thisType.GLVector3.normalize(lightingDirection, lightingDirection);
    $thisType.GLVector3.scale(lightingDirection, -1);
    (this.GL).uniform3fv($thisType.Uniforms.LightingDirection, lightingDirection);
    var arg_C39_4 = $T05().Parse($thisType.Document.getElementById("directionalR").value);
    var arg_C39_5 = $T05().Parse($thisType.Document.getElementById("directionalG").value);
    (this.GL).uniform3f($thisType.Uniforms.DirectionalColor, arg_C39_4, arg_C39_5, $T05().Parse($thisType.Document.getElementById("directionalB").value));
  };

  function ViewPort_InitMatrices (canvas) {
    $thisType.Matrices.ModelView = $T07().$Cast($thisType.GLMatrix4.create());
    $thisType.Matrices.Projection = $T07().$Cast($thisType.GLMatrix4.create());
    $thisType.Matrices.Normal = $T07().$Cast($thisType.GLMatrix3.create());
    var arg_353_2 = canvas.width;
    $thisType.GLMatrix4.perspective(
      45, 
      arg_353_2 / canvas.height, 
      0.1, 
      100, 
      $thisType.Matrices.Projection
    );
  };

  function ViewPort_UploadTexture (textureHandle, imageElement) {
    (this.GL).pixelStorei(this.GL.UNPACK_FLIP_Y_WEBGL, true);
    (this.GL).bindTexture(this.GL.TEXTURE_2D, textureHandle);
    var arg_369_3 = this.GL.TEXTURE_2D;
    var arg_369_5 = this.GL.RGBA;
    var arg_369_6 = this.GL.RGBA;
    (this.GL).texImage2D(
      arg_369_3, 
      0, 
      arg_369_5, 
      arg_369_6, 
      this.GL.UNSIGNED_BYTE, 
      imageElement
    );
    var arg_4DD_3 = this.GL.TEXTURE_2D;
    var arg_4DD_4 = this.GL.TEXTURE_MAG_FILTER;
    (this.GL).texParameteri(arg_4DD_3, arg_4DD_4, this.GL.LINEAR);
    var arg_651_3 = this.GL.TEXTURE_2D;
    var arg_651_4 = this.GL.TEXTURE_MIN_FILTER;
    (this.GL).texParameteri(arg_651_3, arg_651_4, this.GL.LINEAR_MIPMAP_NEAREST);
    (this.GL).generateMipmap(this.GL.TEXTURE_2D);
    (this.GL).bindTexture(this.GL.TEXTURE_2D, null);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.View.ViewPort", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ViewPort__ctor
    );

    $.Method({Static:false, Public:true }, "DrawLighting", 
      JSIL.MethodSignature.Void, 
      ViewPort_DrawLighting
    );

    $.Method({Static:false, Public:true }, "InitMatrices", 
      JSIL.MethodSignature.Action($.Object), 
      ViewPort_InitMatrices
    )
      .Parameter(0, "canvas", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:false, Public:true }, "UploadTexture", 
      new JSIL.MethodSignature(null, [$.Object, $.Object]), 
      ViewPort_UploadTexture
    );

    $.Field({Static:true , Public:true }, "GLVector3", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:true , Public:true }, "GLMatrix3", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:true , Public:true }, "GLMatrix4", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:true , Public:true }, "Document", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:true , Public:true }, "Canvas", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:false, Public:true }, "GL", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Attributes", $asm02.TypeRef("RiftGL.Objects.AttributeCollection")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Uniforms", $asm02.TypeRef("RiftGL.Objects.UniformCollection")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Buffers", $asm02.TypeRef("RiftGL.Objects.BufferCollection")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Matrices", $asm02.TypeRef("RiftGL.Objects.MatrixCollection")); 
    function ViewPort__cctor () {
      $thisType.Attributes = new ($T00())();
      $thisType.Uniforms = new ($T01())();
      $thisType.Buffers = new ($T02())();
      $thisType.Matrices = new ($T03())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ViewPort__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.Camera */ 

(function Camera$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.Vector)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.EventHandler)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm03.System.Collections.Generic.Stack$b1.Of($asm01.System.Object))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [$asm02.TypeRef("RiftGL.Objects.Vector"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Collections.Generic.Stack`1", [$asm01.TypeRef("System.Object")]), null))) ();
  };

  function Camera__ctor () {
    $T00().prototype._ctor.call(this);
    this.MatrixTranslation = $T00().GLMatrix4.create();
    this.MatrixRotation = $T00().GLMatrix4.create();
    $T00().GLMatrix4.identity(this.MatrixTranslation);
    $T00().GLMatrix4.identity(this.MatrixRotation);
    this.set_Location($S00().Construct());
    this.set_Rotation($S00().Construct());
    this.set_Velocity($S00().Construct());
    this.fAcceleration = $S00().Construct();
    this.set_LookAt($S01().Construct(0, 0, 1));
    this.fLookAtAcceleration = $S00().Construct();
    this.fLookAtVelocity = $S00().Construct();
    this.fUp = $S01().Construct(0, 1, 0);
  };

  function Camera_add_EyePartChanged (value) {
    var eventHandler = this.EyePartChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "EyePartChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_add_LookAtChanged (value) {
    var eventHandler = this.LookAtChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "LookAtChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_add_RotationChanged (value) {
    var eventHandler = this.RotationChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "RotationChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_add_VelocityChanged (value) {
    var eventHandler = this.VelocityChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "VelocityChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_Animate (deltaTime) {
    var $temp00;
    var rotationSpeed = +$thisType.ClipSpeed(+this.RotationVelocity * +deltaTime, 25);
    if ((Math.abs(rotationSpeed)) > 0.0001) {
      this.RotationAccelleration = +this.RotationVelocity * -2.5;
      this.RotationVelocity += +this.RotationAccelleration * +deltaTime;
      ($temp00 = +this.get_Yaw() + ((rotationSpeed * +deltaTime) * 10), 
        this.set_Yaw($temp00), 
        $temp00);
    } else {
      this.RotationAccelleration = 0;
      this.RotationVelocity = 0;
    }
    var cosineYaw = Math.fround(Math.cos(-this.get_Rotation().Y));
    var sinYaw = Math.fround(Math.sin(-this.get_Rotation().Y));
    var sinPitch = Math.fround(Math.sin(this.get_Rotation().X));
    var speed = +$thisType.ClipSpeed(+this.get_Velocity().Z * +deltaTime, 15);
    var strafeSpeed = +$thisType.ClipSpeed(+this.get_Velocity().X * +deltaTime, 15);
    if (+(this.get_Velocity()).Length() > 0) {
      this.fAcceleration = $S02().CallStatic($T01(), "op_Multiply", null, this.get_Velocity(), -1.5);
    } else {
      this.fAcceleration = $S00().Construct();
      this.set_Velocity($S00().Construct());
    }
    this.fAcceleration.Y = -9.8;
    this.set_Velocity($T01().op_Addition(
        this.get_Velocity(), 
        $S02().CallStatic($T01(), "op_Multiply", null, this.fAcceleration, deltaTime)
      ));
    var delta = $S00().Construct();
    delta.Y += +this.get_Velocity().Y * +deltaTime;
    delta.X += (sinYaw * speed) + (Math.fround(Math.sin((-this.get_Rotation().Y + 1.57079637))) * strafeSpeed);
    delta.Z += (cosineYaw * speed) + (Math.fround(Math.cos((-this.get_Rotation().Y + 1.57079637))) * strafeSpeed);
    this.fLocation = $T01().op_Addition(this.fLocation, delta);
  };

  function Camera_Center () {
    this.fRotation.Y = 0;
  };

  function Camera_ClipSpeed (value, maximum) {
    if (+value > +maximum) {
      value = +maximum;
    }
    if (+value < -maximum) {
      value = -maximum;
    }
    return value;
  };

  function Camera_DEG2RAD (a) {
    return (0.0174532924 * +a);
  };

  function Camera_get_BillboardMatrix () {
    return this.fBillboardMatrix;
  };

  function Camera_get_EyePart () {
    return this.get_Location();
  };

  function Camera_get_GlobalDirection () {
    return this.fGlobalDirection;
  };

  function Camera_get_Location () {
    return this.fLocation;
  };

  function Camera_get_LookAt () {
    return this.fLookAt;
  };

  function Camera_get_MatrixWorld () {
    return this.fMatrixWorld;
  };

  function Camera_get_Pitch () {
    return this.RAD2DEG(this.fRotation.X);
  };

  function Camera_get_Rotation () {
    return this.fRotation;
  };

  function Camera_get_Velocity () {
    return this.fVelocity;
  };

  function Camera_get_WorldMatrixStack () {
    if (this.fWorldMatrixStack === null) {
      this.fWorldMatrixStack = $S03().Construct();
    }
    return this.fWorldMatrixStack;
  };

  function Camera_get_Yaw () {
    return this.RAD2DEG(this.get_Rotation().Y);
  };

  function Camera_GetMatrix () {
    this.Update();
    return this.get_MatrixWorld();
  };

  function Camera_IncrementCameraPitch (Angle) {
    this.fRotation.Y += +this.DEG2RAD(Angle);
  };

  function Camera_IncrementCameraYaw (Angle) {
    this.fRotation.X += +this.DEG2RAD(Angle);
  };

  function Camera_Point (XEye, YEye, ZEye, XAt, YAt, ZAt) {
    var XRot = Math.fround(Math.atan2(-(+YAt - +YEye), Math.sqrt((((+XAt - +XEye) * (+XAt - +XEye)) + ((+ZAt - +ZEye) * (+ZAt - +ZEye))))));
    var YRot = Math.fround(Math.atan2((+XAt - +XEye), (+ZAt - +ZEye)));
    this.set_Location($S01().Construct(XEye, YEye, ZEye));
    this.set_Rotation($S01().Construct(XRot, YRot, 0));
    return true;
  };

  function Camera_PopMatrixState () {
    var result = $T08().prototype.Pop.call(this.get_WorldMatrixStack());
    this.SetWorldMatrix(result);
    return result;
  };

  function Camera_PushMatrixState () {
    var Result = $T00().Matrices.ModelView;
    $T08().prototype.Push.call(this.get_WorldMatrixStack(), Result);
    return Result;
  };

  function Camera_RAD2DEG (a) {
    return (57.2957764 * +a);
  };

  function Camera_remove_EyePartChanged (value) {
    var eventHandler = this.EyePartChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "EyePartChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_remove_LookAtChanged (value) {
    var eventHandler = this.LookAtChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "LookAtChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_remove_RotationChanged (value) {
    var eventHandler = this.RotationChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "RotationChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_remove_VelocityChanged (value) {
    var eventHandler = this.VelocityChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "VelocityChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Camera_set_BillboardMatrix (value) {
    this.fBillboardMatrix = value;
  };

  function Camera_set_EyePart (value) {
    if ($T01().op_Inequality(this.get_Location(), value)) {
      this.set_Location(value);
      if (this.EyePartChanged !== null) {
        this.EyePartChanged(this, $T0B().Empty);
      }
    }
    this.set_Location(value);
  };

  function Camera_set_GlobalDirection (value) {
    this.fGlobalDirection = value;
  };

  function Camera_set_Location (value) {
    this.fLocation = value;
  };

  function Camera_set_LookAt (value) {
    this.fLookAt = value;
    if (this.LookAtChanged !== null) {
      this.LookAtChanged(this, $T0B().Empty);
    }
  };

  function Camera_set_MatrixWorld (value) {
    this.fMatrixWorld = value;
  };

  function Camera_set_Pitch (value) {
    if (+value > 60) {
      value = 60;
    }
    if (+value < -60) {
      value = -60;
    }
    this.fRotation.X = +this.DEG2RAD(value);
  };

  function Camera_set_Rotation (value) {
    this.fRotation = value;
    if (this.RotationChanged !== null) {
      this.RotationChanged(this, $T0B().Empty);
    }
  };

  function Camera_set_Velocity (value) {
    if (+value.Length() > 15) {
      value.Normalize();
      value = $S02().CallStatic($T01(), "op_Multiply", null, value, 15);
    }
    if (+value.Length() < -15) {
      value.Normalize();
      value = $S02().CallStatic($T01(), "op_Multiply", null, value, -15);
    }
    this.fVelocity = value;
    if (this.VelocityChanged !== null) {
      this.VelocityChanged(this, $T0B().Empty);
    }
  };

  function Camera_set_Yaw (value) {
    if (!((+value < 360) && (+value > -360))) {
      this.fRotation.Y = 0;
    } else {
      this.fRotation.Y = +this.DEG2RAD(value);
    }
  };

  function Camera_SetBillBoardMatrix (position) {
    this.fBillboardMatrix.M41 = +position.X;
    this.fBillboardMatrix.M42 = +position.Y;
    this.fBillboardMatrix.M43 = +position.Z;
    $T00().Matrices.Billboard = $T0A().$Cast(this.fBillboardMatrix);
  };

  function Camera_SetEndTrack () {
    this.EndPos.X = +this.get_Location().X;
    this.EndPos.Y = +this.get_Location().Y;
    this.EndPos.Z = +this.get_Location().Z;
    this.EndRot.X = +this.get_Rotation().X;
    this.EndRot.Y = +this.get_Rotation().Y;
    this.EndRot.Z = +this.get_Rotation().Z;
    return true;
  };

  function Camera_SetStartTrack () {
    this.StartPos.X = +this.get_Location().X;
    this.StartPos.Y = +this.get_Location().Y;
    this.StartPos.Z = +this.get_Location().Z;
    this.StartRot.X = +this.get_Rotation().X;
    this.StartRot.Y = +this.get_Rotation().Y;
    this.StartRot.Z = +this.get_Rotation().Z;
    return true;
  };

  function Camera_SetWorldMatrix (WorldMatrix) {
    $T00().Matrices.ModelView = $T0A().$Cast(WorldMatrix);
  };

  function Camera_Track (Time, Length) {
    var TimeOffset = +Length * +Time;
    var x = +(((+this.EndPos.X - +this.StartPos.X) / +Length)) * TimeOffset;
    var y = +(((+this.EndPos.Y - +this.StartPos.Y) / +Length)) * TimeOffset;
    var z = +(((+this.EndPos.Z - +this.StartPos.Z) / +Length)) * TimeOffset;
    this.set_Location($S01().Construct((+this.StartPos.X + x), (+this.StartPos.Y + y), (+this.StartPos.Z + z)));
    x = +(((+this.EndRot.X - +this.StartRot.X) / +Length)) * TimeOffset;
    y = +(((+this.EndRot.Y - +this.StartRot.Y) / +Length)) * TimeOffset;
    z = +(((+this.EndRot.Z - +this.StartRot.Z) / +Length)) * TimeOffset;
    this.set_Rotation($S01().Construct((+this.StartRot.X + x), (+this.StartRot.Y + y), (+this.StartRot.Z + z)));
    return true;
  };

  function Camera_Update () {
    $T00().GLMatrix4.identity(this.MatrixTranslation);
    $T00().GLMatrix4.identity(this.MatrixRotation);
    $T00().GLMatrix4.translate(this.MatrixTranslation, ($T01().op_Subtraction($S00().Construct(), this.fLocation)).ToFloatVector(), this.MatrixTranslation);
    $T00().GLMatrix4.rotateX(this.MatrixRotation, this.get_Rotation().X, this.MatrixRotation);
    $T00().GLMatrix4.rotateY(this.MatrixRotation, this.get_Rotation().Y, this.MatrixRotation);
    $T00().GLMatrix4.rotateZ(this.MatrixRotation, this.get_Rotation().Z, this.MatrixRotation);
    $T00().GLMatrix4.multiply(this.MatrixRotation, this.MatrixTranslation, $T00().Matrices.ModelView);
    return true;
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("RiftGL.View.ViewPort"), 
      Name: "RiftGL.Objects.Camera", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Camera__ctor
    );

    $.Method({Static:false, Public:true }, "add_EyePartChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_add_EyePartChanged
    );

    $.Method({Static:false, Public:true }, "add_LookAtChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_add_LookAtChanged
    );

    $.Method({Static:false, Public:true }, "add_RotationChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_add_RotationChanged
    );

    $.Method({Static:false, Public:true }, "add_VelocityChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_add_VelocityChanged
    );

    $.Method({Static:false, Public:true }, "Animate", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_Animate
    );

    $.Method({Static:false, Public:true }, "Center", 
      JSIL.MethodSignature.Void, 
      Camera_Center
    );

    $.Method({Static:true , Public:false}, "ClipSpeed", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single]), 
      Camera_ClipSpeed
    );

    $.Method({Static:false, Public:false}, "DEG2RAD", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      Camera_DEG2RAD
    );

    $.Method({Static:false, Public:true }, "get_BillboardMatrix", 
      JSIL.MethodSignature.Return($.Object), 
      Camera_get_BillboardMatrix
    );

    $.Method({Static:false, Public:true }, "get_EyePart", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_get_EyePart
    );

    $.Method({Static:false, Public:true }, "get_GlobalDirection", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_get_GlobalDirection
    );

    $.Method({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_get_Location
    );

    $.Method({Static:false, Public:true }, "get_LookAt", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_get_LookAt
    );

    $.Method({Static:false, Public:true }, "get_MatrixWorld", 
      JSIL.MethodSignature.Return($.Object), 
      Camera_get_MatrixWorld
    );

    $.Method({Static:false, Public:true }, "get_Pitch", 
      JSIL.MethodSignature.Return($.Single), 
      Camera_get_Pitch
    );

    $.Method({Static:false, Public:true }, "get_Rotation", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_get_Rotation
    );

    $.Method({Static:false, Public:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_get_Velocity
    );

    $.Method({Static:false, Public:false}, "get_WorldMatrixStack", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Collections.Generic.Stack`1", [$.Object])), 
      Camera_get_WorldMatrixStack
    );

    $.Method({Static:false, Public:true }, "get_Yaw", 
      JSIL.MethodSignature.Return($.Single), 
      Camera_get_Yaw
    );

    $.Method({Static:false, Public:true }, "GetMatrix", 
      JSIL.MethodSignature.Return($.Object), 
      Camera_GetMatrix
    );

    $.Method({Static:false, Public:true }, "IncrementCameraPitch", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_IncrementCameraPitch
    );

    $.Method({Static:false, Public:true }, "IncrementCameraYaw", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_IncrementCameraYaw
    );

    $.Method({Static:false, Public:true }, "Point", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Camera_Point
    );

    $.Method({Static:false, Public:true }, "PopMatrixState", 
      JSIL.MethodSignature.Return($.Object), 
      Camera_PopMatrixState
    );

    $.Method({Static:false, Public:true }, "PushMatrixState", 
      JSIL.MethodSignature.Return($.Object), 
      Camera_PushMatrixState
    );

    $.Method({Static:false, Public:false}, "RAD2DEG", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      Camera_RAD2DEG
    );

    $.Method({Static:false, Public:true }, "remove_EyePartChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_remove_EyePartChanged
    );

    $.Method({Static:false, Public:true }, "remove_LookAtChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_remove_LookAtChanged
    );

    $.Method({Static:false, Public:true }, "remove_RotationChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_remove_RotationChanged
    );

    $.Method({Static:false, Public:true }, "remove_VelocityChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler")), 
      Camera_remove_VelocityChanged
    );

    $.Method({Static:false, Public:true }, "set_BillboardMatrix", 
      JSIL.MethodSignature.Action($.Object), 
      Camera_set_BillboardMatrix
    )
      .Parameter(0, "value", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:false, Public:true }, "set_EyePart", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_set_EyePart
    );

    $.Method({Static:false, Public:true }, "set_GlobalDirection", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_set_GlobalDirection
    );

    $.Method({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_set_Location
    );

    $.Method({Static:false, Public:true }, "set_LookAt", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_set_LookAt
    );

    $.Method({Static:false, Public:true }, "set_MatrixWorld", 
      JSIL.MethodSignature.Action($.Object), 
      Camera_set_MatrixWorld
    )
      .Parameter(0, "value", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:false, Public:true }, "set_Pitch", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_set_Pitch
    );

    $.Method({Static:false, Public:true }, "set_Rotation", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_set_Rotation
    );

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_set_Velocity
    );

    $.Method({Static:false, Public:true }, "set_Yaw", 
      JSIL.MethodSignature.Action($.Single), 
      Camera_set_Yaw
    );

    $.Method({Static:false, Public:true }, "SetBillBoardMatrix", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      Camera_SetBillBoardMatrix
    );

    $.Method({Static:false, Public:true }, "SetEndTrack", 
      JSIL.MethodSignature.Return($.Boolean), 
      Camera_SetEndTrack
    );

    $.Method({Static:false, Public:true }, "SetStartTrack", 
      JSIL.MethodSignature.Return($.Boolean), 
      Camera_SetStartTrack
    );

    $.Method({Static:false, Public:true }, "SetWorldMatrix", 
      JSIL.MethodSignature.Action($.Object), 
      Camera_SetWorldMatrix
    )
      .Parameter(0, "WorldMatrix", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:false, Public:true }, "Track", 
      new JSIL.MethodSignature($.Boolean, [$.Single, $.Single]), 
      Camera_Track
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Return($.Boolean), 
      Camera_Update
    );

    $.Constant({Static:true , Public:false}, "PI", 3.14159274); 
    $.Field({Static:false, Public:false}, "EyePartChanged", $asm01.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:true }, "StartPos", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:true }, "StartRot", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:true }, "EndPos", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:true }, "EndRot", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fMatrixWorld", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:false, Public:true }, "MatrixTranslation", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:false, Public:true }, "MatrixRotation", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:false, Public:true }, "RotationVelocity", $.Single); 
    $.Field({Static:false, Public:true }, "RotationAccelleration", $.Single); 
    $.Field({Static:false, Public:false}, "LookAtChanged", $asm01.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:false}, "VelocityChanged", $asm01.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:false}, "fRotation", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "RotationChanged", $asm01.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:false}, "fBillboardMatrix", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:false, Public:false}, "fGlobalDirection", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fInitPosition", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fFinalPosition", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fInitLookAt", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fFinalLookAt", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fLookAtVelocity", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fLookAtAcceleration", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fUp", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fForward", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fRight", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fLocation", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fLookAt", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fVelocity", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fAcceleration", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:false}, "fWorldMatrixStack", $asm03.TypeRef("System.Collections.Generic.Stack`1", [$.Object]))
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"), function () { return [[false, true]]; }); 
    $.Property({Static:false, Public:true }, "BillboardMatrix", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"));

    $.Property({Static:false, Public:true }, "GlobalDirection", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "EyePart", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "MatrixWorld", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"));

    $.Property({Static:false, Public:true }, "LookAt", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "Velocity", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "Location", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "Rotation", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "Yaw", $.Single);

    $.Property({Static:false, Public:true }, "Pitch", $.Single);

    $.Property({Static:false, Public:false}, "WorldMatrixStack", $asm03.TypeRef("System.Collections.Generic.Stack`1", [$.Object]))
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"), function () { return [[false, true]]; });

    $.Event({Static:false, Public:true }, "EyePartChanged", $asm01.TypeRef("System.EventHandler"));

    $.Event({Static:false, Public:true }, "LookAtChanged", $asm01.TypeRef("System.EventHandler"));

    $.Event({Static:false, Public:true }, "VelocityChanged", $asm01.TypeRef("System.EventHandler"));

    $.Event({Static:false, Public:true }, "RotationChanged", $asm01.TypeRef("System.EventHandler"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.AttributeCollection */ 

(function AttributeCollection$Members () {
  var $, $thisType;
  function AttributeCollection__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.AttributeCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AttributeCollection__ctor
    );

    $.Field({Static:false, Public:true }, "VertexPosition", $.Object); 
    $.Field({Static:false, Public:true }, "VertexNormal", $.Object); 
    $.Field({Static:false, Public:true }, "TextureCoord", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.UniformCollection */ 

(function UniformCollection$Members () {
  var $, $thisType;
  function UniformCollection__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.UniformCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      UniformCollection__ctor
    );

    $.Field({Static:false, Public:true }, "ProjectionMatrix", $.Object); 
    $.Field({Static:false, Public:true }, "ModelViewMatrix", $.Object); 
    $.Field({Static:false, Public:true }, "NormalMatrix", $.Object); 
    $.Field({Static:false, Public:true }, "Sampler", $.Object); 
    $.Field({Static:false, Public:true }, "UseLighting", $.Object); 
    $.Field({Static:false, Public:true }, "AmbientColor", $.Object); 
    $.Field({Static:false, Public:true }, "LightingDirection", $.Object); 
    $.Field({Static:false, Public:true }, "DirectionalColor", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.BufferCollection */ 

(function BufferCollection$Members () {
  var $, $thisType;
  function BufferCollection__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.BufferCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BufferCollection__ctor
    );

    $.Field({Static:false, Public:true }, "VertexPositions", $.Object); 
    $.Field({Static:false, Public:true }, "VertexNormals", $.Object); 
    $.Field({Static:false, Public:true }, "TextureCoords", $.Object); 
    $.Field({Static:false, Public:true }, "Indices", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.MatrixCollection */ 

(function MatrixCollection$Members () {
  var $, $thisType;
  function MatrixCollection__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.MatrixCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MatrixCollection__ctor
    );

    $.Field({Static:false, Public:true }, "Projection", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:true }, "ModelView", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:true }, "Normal", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:true }, "Billboard", $jsilcore.TypeRef("System.Array", [$.Single])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.CubeData */ 

(function CubeData$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  JSIL.MakeStaticClass("RiftGL.Objects.CubeData", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Positions", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Normals", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "TexCoords", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Indices", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    function CubeData__cctor () {
      $thisType.Positions = JSIL.Array.New($T00(), [-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1]);
      $thisType.Normals = JSIL.Array.New($T00(), [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0]);
      $thisType.TexCoords = JSIL.Array.New($T00(), [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1]);
      $thisType.Indices = JSIL.Array.New($T01(), [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CubeData__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.Inventory */ 

(function Inventory$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function Inventory__ctor$00 () {
    this.Inventory$Previous$value = this;
    this.Inventory$Next$value = this;
  };

  function Inventory__ctor$01 (parent) {
    $thisType.prototype._ctor.call(this);
    this.AttachTo(parent);
  };

  function Inventory_Attach (newChild) {
    if (newChild.get_HasParent()) {
      newChild.Detach();
    }
    newChild.Inventory$Parent$value = this;
    if (this.Inventory$Child$value !== null) {
      newChild.Inventory$Previous$value = this.Inventory$Child$value.Inventory$Previous$value;
      newChild.Inventory$Next$value = this.Inventory$Child$value;
      this.Inventory$Child$value.Inventory$Previous$value.Inventory$Next$value = newChild;
      this.Inventory$Child$value.Inventory$Previous$value = newChild;
    } else {
      this.Inventory$Child$value = newChild;
    }
  };

  function Inventory_AttachTo (newParent) {
    if (this.Inventory$Parent$value !== null) {
      this.Detach();
    }
    this.Inventory$Parent$value = newParent;
    if (this.Inventory$Parent$value.Inventory$Child$value !== null) {
      this.Inventory$Previous$value = this.Inventory$Parent$value.Inventory$Child$value.Inventory$Previous$value;
      this.Inventory$Next$value = this.Inventory$Parent$value.Inventory$Child$value;
      this.Inventory$Parent$value.Inventory$Child$value.Inventory$Previous$value.Inventory$Next$value = this;
      this.Inventory$Parent$value.Inventory$Child$value.Inventory$Previous$value = this;
    } else {
      this.Inventory$Parent$value.Inventory$Child$value = this;
    }
  };

  function Inventory_CountNodes () {
    if (this.Inventory$Child$value !== null) {
      var result = ((((this.Inventory$Child$value).CountNodes() | 0) + 1) | 0);
    } else {
      result = 1;
    }
    return result;
  };

  function Inventory_Detach () {
    if (!((this.Inventory$Parent$value === null) || (this.Inventory$Parent$value.Inventory$Child$value !== this))) {
      if (this.Inventory$Next$value !== this) {
        this.Inventory$Parent$value.Inventory$Child$value = this.Inventory$Next$value;
      } else {
        this.Inventory$Parent$value.Inventory$Child$value = null;
      }
    }
    this.Inventory$Previous$value.Inventory$Next$value = this.Inventory$Next$value;
    this.Inventory$Next$value.Inventory$Previous$value = this.Inventory$Previous$value;
    this.Inventory$Previous$value = this;
    this.Inventory$Next$value = this;
  };

  function Inventory_get_Child () {
    return this.Inventory$Child$value;
  };

  function Inventory_get_HasChild () {
    return (this.Inventory$Child$value !== null);
  };

  function Inventory_get_HasParent () {
    return (this.Inventory$Parent$value !== null);
  };

  function Inventory_get_Next () {
    return this.Inventory$Next$value;
  };

  function Inventory_get_Parent () {
    return this.Inventory$Parent$value;
  };

  function Inventory_get_Previous () {
    return this.Inventory$Previous$value;
  };

  function Inventory_IsFirstChild () {
    return ((this.Inventory$Parent$value !== null) && (this.Inventory$Parent$value.Inventory$Child$value === this));
  };

  function Inventory_IsLastChild () {
    return ((this.Inventory$Parent$value !== null) && (this.Inventory$Parent$value.Inventory$Child$value.Inventory$Previous$value === this));
  };

  function Inventory_set_Child (value) {
    this.Inventory$Child$value = value;
  };

  function Inventory_set_Next (value) {
    this.Inventory$Next$value = value;
  };

  function Inventory_set_Parent (value) {
    this.Inventory$Parent$value = value;
  };

  function Inventory_set_Previous (value) {
    this.Inventory$Previous$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.Inventory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Inventory__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      Inventory__ctor$01
    );

    $.Method({Static:false, Public:true }, "Attach", 
      JSIL.MethodSignature.Action($.Type), 
      Inventory_Attach
    );

    $.Method({Static:false, Public:true }, "AttachTo", 
      JSIL.MethodSignature.Action($.Type), 
      Inventory_AttachTo
    );

    $.Method({Static:false, Public:true }, "CountNodes", 
      JSIL.MethodSignature.Return($.Int32), 
      Inventory_CountNodes
    );

    $.Method({Static:false, Public:true }, "Detach", 
      JSIL.MethodSignature.Void, 
      Inventory_Detach
    );

    $.Method({Static:false, Public:true }, "get_Child", 
      JSIL.MethodSignature.Return($.Type), 
      Inventory_get_Child
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasChild", 
      JSIL.MethodSignature.Return($.Boolean), 
      Inventory_get_HasChild
    );

    $.Method({Static:false, Public:true }, "get_HasParent", 
      JSIL.MethodSignature.Return($.Boolean), 
      Inventory_get_HasParent
    );

    $.Method({Static:false, Public:true }, "get_Next", 
      JSIL.MethodSignature.Return($.Type), 
      Inventory_get_Next
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Type), 
      Inventory_get_Parent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Previous", 
      JSIL.MethodSignature.Return($.Type), 
      Inventory_get_Previous
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "IsFirstChild", 
      JSIL.MethodSignature.Return($.Boolean), 
      Inventory_IsFirstChild
    );

    $.Method({Static:false, Public:true }, "IsLastChild", 
      JSIL.MethodSignature.Return($.Boolean), 
      Inventory_IsLastChild
    );

    $.Method({Static:false, Public:true }, "set_Child", 
      JSIL.MethodSignature.Action($.Type), 
      Inventory_set_Child
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Next", 
      JSIL.MethodSignature.Action($.Type), 
      Inventory_set_Next
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Parent", 
      JSIL.MethodSignature.Action($.Type), 
      Inventory_set_Parent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Previous", 
      JSIL.MethodSignature.Action($.Type), 
      Inventory_set_Previous
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Inventory$Parent$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Inventory$Child$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Inventory$Previous$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Inventory$Next$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Parent", $.Type);

    $.Property({Static:false, Public:true }, "Child", $.Type);

    $.Property({Static:false, Public:true }, "Previous", $.Type);

    $.Property({Static:false, Public:true }, "Next", $.Type);

    $.Property({Static:false, Public:true }, "HasParent", $.Boolean);

    $.Property({Static:false, Public:true }, "HasChild", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.GlObject */ 

(function GlObject$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.System.Collections.Generic.Stack$b1.Of(System.Array.Of($asm01.System.Single)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.Inventory)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.Objects.Vector)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.RiftGL.Objects.Camera)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Collections.Generic.Stack`1", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Single")])]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [$asm02.TypeRef("RiftGL.Objects.Vector"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function GlObject__ctor$00 () {
    this.glViewMatrix = $S00().Construct();
    $T01().prototype._ctor.call(this);
    this.GlObject$Position$value = $S01().Construct();
    this.GlObject$Velocity$value = $S01().Construct();
    this.GlObject$Acceleration$value = $S01().Construct();
  };

  function GlObject__ctor$01 (parent) {
    this.glViewMatrix = $S00().Construct();
    $T01().prototype._ctor.call(this, parent);
    this.GlObject$Position$value = $S01().Construct();
    this.GlObject$Velocity$value = $S01().Construct();
    this.GlObject$Acceleration$value = $S01().Construct();
  };

  function GlObject_Animate (deltaTime) {
    this.OnAnimate(deltaTime);
    if (this.get_HasChild()) {
      ($thisType.$Cast(this.Inventory$Child$value)).Animate(deltaTime);
    }
    if (!(!this.get_HasParent() || this.IsLastChild())) {
      ($thisType.$Cast(this.Inventory$Next$value)).Animate(deltaTime);
    }
  };

  function GlObject_Draw (camera) {
    this.PushMatrix();
    this.OnDraw(camera);
    this.PopMatrix();
  };

  function GlObject_FindRoot () {
    if (this.Inventory$Parent$value !== null) {
      var result = ($thisType.$Cast(this.Inventory$Parent$value)).FindRoot();
    } else {
      result = this;
    }
    return result;
  };

  function GlObject_get_Acceleration () {
    return this.GlObject$Acceleration$value;
  };

  function GlObject_get_Position () {
    return this.GlObject$Position$value;
  };

  function GlObject_get_Size () {
    return this.GlObject$Size$value;
  };

  function GlObject_get_Velocity () {
    return this.GlObject$Velocity$value;
  };

  function GlObject_Load () {
  };

  function GlObject_OnAnimate (deltaTime) {
    this.GlObject$Position$value = $T02().op_Addition(this.GlObject$Position$value, $S02().CallStatic($T02(), "op_Multiply", null, this.GlObject$Velocity$value, deltaTime));
    this.GlObject$Velocity$value = $T02().op_Addition(this.GlObject$Velocity$value, $S02().CallStatic($T02(), "op_Multiply", null, this.GlObject$Acceleration$value, deltaTime));
  };

  function GlObject_OnCollision (collisionObject) {
  };

  function GlObject_OnDraw (camera) {
  };

  function GlObject_OnPrepare () {
    this.ProcessCollisions(this.FindRoot());
  };

  function GlObject_PopMatrix () {
    $T05().Matrices.ModelView = $T00().prototype.Pop.call(this.glViewMatrix);
  };

  function GlObject_Prepare () {
    this.OnPrepare();
    if (this.get_HasChild()) {
      ($thisType.$Cast(this.Inventory$Child$value)).Prepare();
    }
    if (!(!this.get_HasParent() || this.IsLastChild())) {
      ($thisType.$Cast(this.Inventory$Next$value)).Prepare();
    }
  };

  function GlObject_ProcessCollisions (obj) {
    if (+($T02().op_Subtraction(obj.GlObject$Position$value, this.GlObject$Position$value)).Length() <= (+obj.GlObject$Size$value + +this.GlObject$Size$value)) {
      this.OnCollision(obj);
      if (this.get_HasChild()) {
        ($thisType.$Cast(this.Inventory$Child$value)).ProcessCollisions(obj);
      }
      if (!(!this.get_HasParent() || this.IsLastChild())) {
        ($thisType.$Cast(this.Inventory$Next$value)).ProcessCollisions(obj);
      }
    }
    if (obj.get_HasChild()) {
      this.ProcessCollisions($thisType.$Cast(obj.Inventory$Child$value));
    }
    if (!(!obj.get_HasParent() || obj.IsLastChild())) {
      this.ProcessCollisions($thisType.$Cast(obj.Inventory$Next$value));
    }
  };

  function GlObject_PushMatrix () {
    var modelView = JSIL.Array.New($T03(), 16);
    $S03().CallStatic($T07(), "Copy", null, $T05().Matrices.ModelView, modelView, modelView.length);
    $T00().prototype.Push.call(this.glViewMatrix, modelView);
  };

  function GlObject_set_Acceleration (value) {
    this.GlObject$Acceleration$value = value;
  };

  function GlObject_set_Position (value) {
    this.GlObject$Position$value = value;
  };

  function GlObject_set_Size (value) {
    this.GlObject$Size$value = +value;
  };

  function GlObject_set_Velocity (value) {
    this.GlObject$Velocity$value = value;
  };

  function GlObject_Unload () {
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("RiftGL.Objects.Inventory"), 
      Name: "RiftGL.Objects.GlObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GlObject__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Inventory")), 
      GlObject__ctor$01
    );

    $.Method({Static:false, Public:true }, "Animate", 
      JSIL.MethodSignature.Action($.Single), 
      GlObject_Animate
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      GlObject_Draw
    );

    $.Method({Static:false, Public:false}, "FindRoot", 
      JSIL.MethodSignature.Return($.Type), 
      GlObject_FindRoot
    );

    $.Method({Static:false, Public:true }, "get_Acceleration", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      GlObject_get_Acceleration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      GlObject_get_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Single), 
      GlObject_get_Size
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Vector")), 
      GlObject_get_Velocity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "Load", 
      JSIL.MethodSignature.Void, 
      GlObject_Load
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnAnimate", 
      JSIL.MethodSignature.Action($.Single), 
      GlObject_OnAnimate
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnCollision", 
      JSIL.MethodSignature.Action($.Type), 
      GlObject_OnCollision
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDraw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      GlObject_OnDraw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnPrepare", 
      JSIL.MethodSignature.Void, 
      GlObject_OnPrepare
    );

    $.Method({Static:false, Public:true }, "PopMatrix", 
      JSIL.MethodSignature.Void, 
      GlObject_PopMatrix
    );

    $.Method({Static:false, Public:true }, "Prepare", 
      JSIL.MethodSignature.Void, 
      GlObject_Prepare
    );

    $.Method({Static:false, Public:true }, "ProcessCollisions", 
      JSIL.MethodSignature.Action($.Type), 
      GlObject_ProcessCollisions
    );

    $.Method({Static:false, Public:true }, "PushMatrix", 
      JSIL.MethodSignature.Void, 
      GlObject_PushMatrix
    );

    $.Method({Static:false, Public:true }, "set_Acceleration", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      GlObject_set_Acceleration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      GlObject_set_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Single), 
      GlObject_set_Size
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Vector")), 
      GlObject_set_Velocity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "Unload", 
      JSIL.MethodSignature.Void, 
      GlObject_Unload
    );

    $.Field({Static:false, Public:false}, "glViewMatrix", $asm03.TypeRef("System.Collections.Generic.Stack`1", [$jsilcore.TypeRef("System.Array", [$.Single])])); 
    $.Field({Static:false, Public:false}, "GlObject$Acceleration$value", $asm02.TypeRef("RiftGL.Objects.Vector"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GlObject$Position$value", $asm02.TypeRef("RiftGL.Objects.Vector"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GlObject$Velocity$value", $asm02.TypeRef("RiftGL.Objects.Vector"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GlObject$Size$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Acceleration", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "Position", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "Velocity", $asm02.TypeRef("RiftGL.Objects.Vector"));

    $.Property({Static:false, Public:true }, "Size", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.Crate */ 

(function Crate$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.GlObject)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.Vector)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.RiftGL.Objects.Crate_$l$gc__DisplayClass2a)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.RiftGL.Objects.Camera)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm01.System.UInt16))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.RiftGL.Objects.CubeData)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function Crate__ctor () {
    $T00().prototype._ctor.call(this);
    this.Rotation = $S00().Construct();
  };

  function Crate_CompileShader (viewPort, filename) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var extension = ($T04().GetExtension(filename).toLowerCase());
          var text = extension;
          if (text !== null) {
            if (!(text == "fs")) {
              if (!(text == "vs")) {
                $label0 = 1 /* goto IL_1B8 */ ;
                continue $labelgroup0;
              }
              var arg_1B0_2 = viewPort.GL;
              var shaderObject = arg_1B0_2.createShader(viewPort.GL.VERTEX_SHADER);
            } else {
              var arg_F0_2 = viewPort.GL;
              shaderObject = arg_F0_2.createShader(viewPort.GL.FRAGMENT_SHADER);
            }
            var shaderText = $T06().ReadAllText(filename);
            (viewPort.GL).shaderSource(shaderObject, shaderText);
            (viewPort.GL).compileShader(shaderObject);
            var arg_3A1_2 = viewPort.GL;
            var arg_3A1_3 = shaderObject;
            if (!$T07().$Cast(arg_3A1_2.getShaderParameter(arg_3A1_3, viewPort.GL.COMPILE_STATUS))) {
              var arg_480_2 = JSIL.GlobalNamespace.alert;
              arg_480_2((viewPort.GL).getShaderInfoLog(shaderObject));
              var result = null;
            } else {
              $T08().WriteLine(JSIL.ConcatString("Loaded ", filename));
              result = shaderObject;
            }
            return result;
          }

          $label0 = 1 /* goto IL_1B8 */ ;
          continue $labelgroup0;
        case 1: /* IL_1B8 */ 
          throw $S01().Construct(extension);

          break $labelgroup0;
      }
    }
  };

  function Crate_DegreesToRadians (degrees) {
    return Math.fround(+((+degrees * 3.1415926535897931) / 180));
  };

  function Crate_InitShaders (viewPort) {
    var fragmentShader = $thisType.CompileShader(viewPort, "crate.fs");
    var vertexShader = $thisType.CompileShader(viewPort, "crate.vs");
    $thisType.ShaderProgram = (viewPort.GL).createProgram();
    (viewPort.GL).attachShader($thisType.ShaderProgram, vertexShader);
    (viewPort.GL).attachShader($thisType.ShaderProgram, fragmentShader);
    (viewPort.GL).linkProgram($thisType.ShaderProgram);
    var arg_2BD_2 = viewPort.GL;
    if (!$T07().$Cast(arg_2BD_2.getProgramParameter($thisType.ShaderProgram, viewPort.GL.LINK_STATUS))) {
      JSIL.GlobalNamespace.alert("Could not link shader");
    } else {
      (viewPort.GL).useProgram($thisType.ShaderProgram);
      $T02().Attributes.VertexPosition = (viewPort.GL).getAttribLocation($thisType.ShaderProgram, "aVertexPosition");
      $T02().Attributes.VertexNormal = (viewPort.GL).getAttribLocation($thisType.ShaderProgram, "aVertexNormal");
      $T02().Attributes.TextureCoord = (viewPort.GL).getAttribLocation($thisType.ShaderProgram, "aTextureCoord");
      $T02().Uniforms.ProjectionMatrix = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uPMatrix");
      $T02().Uniforms.ModelViewMatrix = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uMVMatrix");
      $T02().Uniforms.NormalMatrix = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uNMatrix");
      $T02().Uniforms.Sampler = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uSampler");
      $T02().Uniforms.UseLighting = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uUseLighting");
      $T02().Uniforms.AmbientColor = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uAmbientColor");
      $T02().Uniforms.LightingDirection = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uLightingDirection");
      $T02().Uniforms.DirectionalColor = (viewPort.GL).getUniformLocation($thisType.ShaderProgram, "uDirectionalColor");
    }
  };

  function Crate_InitTexture (viewPort, $exception) {
    var $closure0 = new ($T0C())();
    $closure0.viewPort = viewPort;
    $thisType.CrateTexture = ($closure0.viewPort.GL).createTexture();
    var arg_D1_0 = $closure0;
    arg_D1_0.imageElement = $T02().Document.createElement("img");
    $closure0.imageElement.onload = $T0D().New($closure0, $T0C().prototype.$lInitTexture$gb__29);
    try {
      var imageBytes = $T06().ReadAllBytes("crate.png");
      var objectUrl = JSIL.GlobalNamespace.JSIL.GetObjectURLForBytes(imageBytes, "image/png");
      $closure0.imageElement.src = objectUrl;
    } catch ($exception) {
      $T08().WriteLine("Falling back to a second HTTP request for crate.png because Object URLs are not available");
      $closure0.imageElement.src = "Files/crate.png";
    }
  };

  function Crate_OnAnimate (deltaTime) {
    $T00().prototype.OnAnimate.call(this, deltaTime);
    this.Rotation.X += +(((+this.Speed.X * +deltaTime) / 1000));
    this.Rotation.Y += +(((+this.Speed.Y * +deltaTime) / 1000));
  };

  function Crate_OnDraw (camera) {
    $T02().Matrices.ModelView = $T10().$Cast($T02().GLMatrix4.translate($T02().Matrices.ModelView, JSIL.Array.New($T0A(), [this.GlObject$Position$value.X, this.GlObject$Position$value.Y, this.GlObject$Position$value.Z])));
    $T02().Matrices.ModelView = $T10().$Cast($T02().GLMatrix4.rotateX($T02().Matrices.ModelView, $thisType.DegreesToRadians(this.Rotation.X)));
    $T02().Matrices.ModelView = $T10().$Cast($T02().GLMatrix4.rotateY($T02().Matrices.ModelView, $thisType.DegreesToRadians(this.Rotation.Y)));
    var arg_350_2 = camera.GL;
    arg_350_2.bindBuffer(camera.GL.ARRAY_BUFFER, $T02().Buffers.VertexPositions);
    var arg_448_2 = camera.GL;
    arg_448_2.vertexAttribPointer(
      $T02().Attributes.VertexPosition, 
      3, 
      camera.GL.FLOAT, 
      false, 
      0, 
      0
    );
    var arg_514_2 = camera.GL;
    arg_514_2.bindBuffer(camera.GL.ARRAY_BUFFER, $T02().Buffers.VertexNormals);
    var arg_60C_2 = camera.GL;
    arg_60C_2.vertexAttribPointer(
      $T02().Attributes.VertexNormal, 
      3, 
      camera.GL.FLOAT, 
      false, 
      0, 
      0
    );
    var arg_6D8_2 = camera.GL;
    arg_6D8_2.bindBuffer(camera.GL.ARRAY_BUFFER, $T02().Buffers.TextureCoords);
    var arg_7D0_2 = camera.GL;
    arg_7D0_2.vertexAttribPointer(
      $T02().Attributes.TextureCoord, 
      2, 
      camera.GL.FLOAT, 
      false, 
      0, 
      0
    );
    var arg_888_2 = camera.GL;
    arg_888_2.activeTexture(camera.GL.TEXTURE0);
    var arg_94F_2 = camera.GL;
    arg_94F_2.bindTexture(camera.GL.TEXTURE_2D, $thisType.CrateTexture);
    (camera.GL).uniform1i($T02().Uniforms.Sampler, 0);
    var arg_A94_2 = camera.GL;
    arg_A94_2.bindBuffer(camera.GL.ELEMENT_ARRAY_BUFFER, $T02().Buffers.Indices);
    (camera.GL).uniformMatrix4fv($T02().Uniforms.ProjectionMatrix, false, $T02().Matrices.Projection);
    (camera.GL).uniformMatrix4fv($T02().Uniforms.ModelViewMatrix, false, $T02().Matrices.ModelView);
    $T02().GLMatrix4.toInverseMat3($T02().Matrices.ModelView, $T02().Matrices.Normal);
    $T02().GLMatrix3.transpose($T02().Matrices.Normal);
    (camera.GL).uniformMatrix3fv($T02().Uniforms.NormalMatrix, false, $T02().Matrices.Normal);
    var arg_E5B_2 = camera.GL;
    var arg_E5B_3 = camera.GL.TRIANGLES;
    var arg_E5B_4 = ($T13().Indices.length | 0);
    arg_E5B_2.drawElements(arg_E5B_3, arg_E5B_4, camera.GL.UNSIGNED_SHORT, 0);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("RiftGL.Objects.GlObject"), 
      Name: "RiftGL.Objects.Crate", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Crate__ctor
    );

    $.Method({Static:true , Public:true }, "CompileShader", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("RiftGL.View.ViewPort"), $.String]), 
      Crate_CompileShader
    );

    $.Method({Static:true , Public:true }, "DegreesToRadians", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      Crate_DegreesToRadians
    );

    $.Method({Static:false, Public:true }, "InitShaders", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.View.ViewPort")), 
      Crate_InitShaders
    );

    $.Method({Static:false, Public:true }, "InitTexture", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.View.ViewPort")), 
      Crate_InitTexture
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnAnimate", 
      JSIL.MethodSignature.Action($.Single), 
      Crate_OnAnimate
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDraw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      Crate_OnDraw
    );

    $.Field({Static:true , Public:true }, "ShaderProgram", $.Object); 
    $.Field({Static:true , Public:true }, "CrateTexture", $.Object); 
    $.Field({Static:false, Public:true }, "Rotation", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    $.Field({Static:false, Public:true }, "Speed", $asm02.TypeRef("RiftGL.Objects.Vector")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.Crate+<>c__DisplayClass2a */ 

(function $l$gc__DisplayClass2a$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.Crate)) ();
  };

  function $l$gc__DisplayClass2a__ctor () {
  };

  function $l$gc__DisplayClass2a_$lInitTexture$gb__29 () {
    (this.viewPort).UploadTexture($T00().CrateTexture, this.imageElement);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.Crate+<>c__DisplayClass2a", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2a__ctor
    );

    $.Method({Static:false, Public:true }, "$lInitTexture$gb__29", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2a_$lInitTexture$gb__29
    );

    $.Field({Static:false, Public:true }, "imageElement", $.Object); 
    $.Field({Static:false, Public:true }, "viewPort", $asm02.TypeRef("RiftGL.View.ViewPort")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class RiftGL.Objects.Gui */ 

(function Gui$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.GlObject)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.Camera)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function Gui__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Gui_get_CurrentTime () {
    return this.Gui$CurrentTime$value;
  };

  function Gui_get_EnemiesLeft () {
    return this.Gui$EnemiesLeft$value;
  };

  function Gui_OnDraw (camera) {
    $T02().Document.getElementById("cameraLocationX").value = +camera.get_Location().X;
    $T02().Document.getElementById("cameraLocationY").value = +camera.get_Location().Y;
    $T02().Document.getElementById("cameraLocationZ").value = +camera.get_Location().Z;
    $T02().Document.getElementById("cameraRotationX").value = +camera.get_Rotation().X;
    $T02().Document.getElementById("cameraRotationY").value = +camera.get_Rotation().Y;
    $T02().Document.getElementById("cameraRotationZ").value = +camera.get_Rotation().Z;
    $T02().Document.getElementById("cameraRotationSpeed").value = +camera.RotationVelocity;
  };

  function Gui_set_CurrentTime (value) {
    this.Gui$CurrentTime$value = +value;
  };

  function Gui_set_EnemiesLeft (value) {
    this.Gui$EnemiesLeft$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("RiftGL.Objects.GlObject"), 
      Name: "RiftGL.Objects.Gui", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Gui__ctor
    );

    $.Method({Static:false, Public:true }, "get_CurrentTime", 
      JSIL.MethodSignature.Return($.Single), 
      Gui_get_CurrentTime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_EnemiesLeft", 
      JSIL.MethodSignature.Return($.Int32), 
      Gui_get_EnemiesLeft
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "OnDraw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      Gui_OnDraw
    );

    $.Method({Static:false, Public:true }, "set_CurrentTime", 
      JSIL.MethodSignature.Action($.Single), 
      Gui_set_CurrentTime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_EnemiesLeft", 
      JSIL.MethodSignature.Action($.Int32), 
      Gui_set_EnemiesLeft
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Gui$CurrentTime$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Gui$EnemiesLeft$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "CurrentTime", $.Single);

    $.Property({Static:false, Public:true }, "EnemiesLeft", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.Map */ 

(function Map$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function Map__ctor () {
  };

  function Map_get_Columns () {
    return this.Map$Columns$value;
  };

  function Map_get_HeightMap () {
    return this.Map$HeightMap$value;
  };

  function Map_get_Rows () {
    return this.Map$Rows$value;
  };

  function Map_get_SizeX () {
    return this.Map$SizeX$value;
  };

  function Map_get_SizeZ () {
    return this.Map$SizeZ$value;
  };

  function Map_get_X () {
    return this.Map$X$value;
  };

  function Map_get_Z () {
    return this.Map$Z$value;
  };

  function Map_set_Columns (value) {
    this.Map$Columns$value = (value | 0);
  };

  function Map_set_HeightMap (value) {
    this.Map$HeightMap$value = value;
  };

  function Map_set_Rows (value) {
    this.Map$Rows$value = (value | 0);
  };

  function Map_set_SizeX (value) {
    this.Map$SizeX$value = +value;
  };

  function Map_set_SizeZ (value) {
    this.Map$SizeZ$value = +value;
  };

  function Map_set_X (value) {
    this.Map$X$value = +value;
  };

  function Map_set_Z (value) {
    this.Map$Z$value = +value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.Map", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Map__ctor
    );

    $.Method({Static:false, Public:true }, "get_Columns", 
      JSIL.MethodSignature.Return($.Int32), 
      Map_get_Columns
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HeightMap", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single])), 
      Map_get_HeightMap
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Rows", 
      JSIL.MethodSignature.Return($.Int32), 
      Map_get_Rows
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SizeX", 
      JSIL.MethodSignature.Return($.Single), 
      Map_get_SizeX
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SizeZ", 
      JSIL.MethodSignature.Return($.Single), 
      Map_get_SizeZ
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Single), 
      Map_get_X
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Z", 
      JSIL.MethodSignature.Return($.Single), 
      Map_get_Z
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Columns", 
      JSIL.MethodSignature.Action($.Int32), 
      Map_set_Columns
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_HeightMap", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single])), 
      Map_set_HeightMap
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Rows", 
      JSIL.MethodSignature.Action($.Int32), 
      Map_set_Rows
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SizeX", 
      JSIL.MethodSignature.Action($.Single), 
      Map_set_SizeX
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SizeZ", 
      JSIL.MethodSignature.Action($.Single), 
      Map_set_SizeZ
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_X", 
      JSIL.MethodSignature.Action($.Single), 
      Map_set_X
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Z", 
      JSIL.MethodSignature.Action($.Single), 
      Map_set_Z
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Map$X$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Map$Z$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Map$SizeX$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Map$SizeZ$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Map$Rows$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Map$Columns$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Map$HeightMap$value", $jsilcore.TypeRef("System.Array", [$.Single]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "X", $.Single);

    $.Property({Static:false, Public:true }, "Z", $.Single);

    $.Property({Static:false, Public:true }, "SizeX", $.Single);

    $.Property({Static:false, Public:true }, "SizeZ", $.Single);

    $.Property({Static:false, Public:true }, "Rows", $.Int32);

    $.Property({Static:false, Public:true }, "Columns", $.Int32);

    $.Property({Static:false, Public:true }, "HeightMap", $jsilcore.TypeRef("System.Array", [$.Single]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.ModelUpdate */ 

(function ModelUpdate$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.GlObject)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.ModelUpdate_UpdateType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.Objects.Map)) ();
  };

  function ModelUpdate__ctor () {
  };

  function ModelUpdate_get_Model () {
    return this.ModelUpdate$Model$value;
  };

  function ModelUpdate_get_Type () {
    return this.ModelUpdate$Type$value;
  };

  function ModelUpdate_get_World () {
    return this.ModelUpdate$World$value;
  };

  function ModelUpdate_set_Model (value) {
    this.ModelUpdate$Model$value = value;
  };

  function ModelUpdate_set_Type (value) {
    this.ModelUpdate$Type$value = value;
  };

  function ModelUpdate_set_World (value) {
    this.ModelUpdate$World$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.ModelUpdate", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModelUpdate__ctor
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.GlObject")), 
      ModelUpdate_get_Model
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.ModelUpdate+UpdateType")), 
      ModelUpdate_get_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_World", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Map")), 
      ModelUpdate_get_World
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Model", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.GlObject")), 
      ModelUpdate_set_Model
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.ModelUpdate+UpdateType")), 
      ModelUpdate_set_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_World", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Map")), 
      ModelUpdate_set_World
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ModelUpdate$Type$value", $asm02.TypeRef("RiftGL.Objects.ModelUpdate+UpdateType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelUpdate$World$value", $asm02.TypeRef("RiftGL.Objects.Map"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelUpdate$Model$value", $asm02.TypeRef("RiftGL.Objects.GlObject"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("RiftGL.Objects.ModelUpdate+UpdateType"));

    $.Property({Static:false, Public:true }, "World", $asm02.TypeRef("RiftGL.Objects.Map"));

    $.Property({Static:false, Public:true }, "Model", $asm02.TypeRef("RiftGL.Objects.GlObject"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum RiftGL.Objects.ModelUpdate+UpdateType */ 

JSIL.MakeEnum(
  "RiftGL.Objects.ModelUpdate+UpdateType", false, {
    Map: 0, 
    Object: 1
  }, false
);

/* class RiftGL.Objects.Player */ 

(function Player$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.GlObject)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.Camera)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.Objects.Terrain)) ();
  };

  function Player__ctor () {
    $T00().prototype._ctor.call(this);
    this.GlObject$Size$value = 2;
  };

  function Player_DetachCamera () {
    this.Camera = null;
  };

  function Player_SetCamera (camera) {
    this.Camera = camera;
  };

  function Player_SetTerrain (terrain) {
    this.Terrain = terrain;
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("RiftGL.Objects.GlObject"), 
      Name: "RiftGL.Objects.Player", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Player__ctor
    );

    $.Method({Static:false, Public:true }, "DetachCamera", 
      JSIL.MethodSignature.Void, 
      Player_DetachCamera
    );

    $.Method({Static:false, Public:true }, "SetCamera", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      Player_SetCamera
    );

    $.Method({Static:false, Public:true }, "SetTerrain", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Terrain")), 
      Player_SetTerrain
    );

    $.Field({Static:false, Public:true }, "Camera", $asm02.TypeRef("RiftGL.Objects.Camera")); 
    $.Field({Static:false, Public:true }, "Terrain", $asm02.TypeRef("RiftGL.Objects.Terrain")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate RiftGL.Objects.MapCallback */ 

JSIL.MakeDelegate("RiftGL.Objects.MapCallback", true, []);

/* class RiftGL.Objects.RiftRepository */ 

(function RiftRepository$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.Vector)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.RiftGL.Objects.MapCallback)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.RiftGL.Objects.RiftRequest)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };

  function RiftRepository__ctor (url, username, password) {
    this.RiftRepository$Url$value = url;
    this.RiftRepository$Username$value = username;
    this.RiftRepository$Password$value = password;
  };

  function RiftRepository_get_Password () {
    return this.RiftRepository$Password$value;
  };

  function RiftRepository_get_Url () {
    return this.RiftRepository$Url$value;
  };

  function RiftRepository_get_Username () {
    return this.RiftRepository$Username$value;
  };

  function RiftRepository_LoadMap (location, distance, callback) {
    var sb = $S00().Construct();
    $S01().CallVirtual("Append", null, sb, JSIL.ConcatString("locationX=", location.X, "&"));
    $S01().CallVirtual("Append", null, sb, JSIL.ConcatString("locationY=", location.Y, "&"));
    $S01().CallVirtual("Append", null, sb, JSIL.ConcatString("locationZ=", location.Z, "&"));
    $S01().CallVirtual("Append", null, sb, JSIL.ConcatString("distance=", distance));
    var paramString = sb.toString();
    ((new ($T06())(this.RiftRepository$Url$value, this.RiftRepository$Username$value, this.RiftRepository$Password$value))).Get(JSIL.ConcatString("/api/world?", paramString), callback);
  };

  function RiftRepository_set_Password (value) {
    this.RiftRepository$Password$value = value;
  };

  function RiftRepository_set_Url (value) {
    this.RiftRepository$Url$value = value;
  };

  function RiftRepository_set_Username (value) {
    this.RiftRepository$Username$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.RiftRepository", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ]), 
      RiftRepository__ctor
    );

    $.Method({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($.String), 
      RiftRepository_get_Password
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String), 
      RiftRepository_get_Url
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Username", 
      JSIL.MethodSignature.Return($.String), 
      RiftRepository_get_Username
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "LoadMap", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("RiftGL.Objects.Vector"), $.Single, 
          $asm02.TypeRef("RiftGL.Objects.MapCallback")
        ]), 
      RiftRepository_LoadMap
    );

    $.Method({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String), 
      RiftRepository_set_Password
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String), 
      RiftRepository_set_Url
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Username", 
      JSIL.MethodSignature.Action($.String), 
      RiftRepository_set_Username
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "RiftRepository$Url$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RiftRepository$Password$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RiftRepository$Username$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Url", $.String);

    $.Property({Static:false, Public:true }, "Password", $.String);

    $.Property({Static:false, Public:true }, "Username", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.RiftRequest */ 

(function RiftRequest$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.MapCallback)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function RiftRequest__ctor (url, username, password) {
    this.RiftRequest$Url$value = url;
    this.RiftRequest$Username$value = username;
    this.RiftRequest$Password$value = password;
  };

  function RiftRequest_Get (path, callback) {
    var jquery = JSIL.GlobalNamespace.$;
    jquery.getJSON(path, callback);
  };

  function RiftRequest_get_Password () {
    return this.RiftRequest$Password$value;
  };

  function RiftRequest_get_Url () {
    return this.RiftRequest$Url$value;
  };

  function RiftRequest_get_Username () {
    return this.RiftRequest$Username$value;
  };

  function RiftRequest_set_Password (value) {
    this.RiftRequest$Password$value = value;
  };

  function RiftRequest_set_Url (value) {
    this.RiftRequest$Url$value = value;
  };

  function RiftRequest_set_Username (value) {
    this.RiftRequest$Username$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.RiftRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ]), 
      RiftRequest__ctor
    );

    $.Method({Static:false, Public:true }, "Get", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("RiftGL.Objects.MapCallback")]), 
      RiftRequest_Get
    );

    $.Method({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($.String), 
      RiftRequest_get_Password
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String), 
      RiftRequest_get_Url
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Username", 
      JSIL.MethodSignature.Return($.String), 
      RiftRequest_get_Username
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String), 
      RiftRequest_set_Password
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String), 
      RiftRequest_set_Url
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Username", 
      JSIL.MethodSignature.Action($.String), 
      RiftRequest_set_Username
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "RiftRequest$Url$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RiftRequest$Password$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RiftRequest$Username$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Url", $.String);

    $.Property({Static:false, Public:true }, "Password", $.String);

    $.Property({Static:false, Public:true }, "Username", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.HeightMap */ 

(function HeightMap$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };

  function HeightMap__ctor () {
  };

  function HeightMap_get_Values () {
    return this.HeightMap$Values$value;
  };

  function HeightMap_set_Values (value) {
    this.HeightMap$Values$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.HeightMap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      HeightMap__ctor
    );

    $.Method({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single])), 
      HeightMap_get_Values
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Values", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single])), 
      HeightMap_set_Values
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "HeightMap$Values$value", $jsilcore.TypeRef("System.Array", [$.Single]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Values", $jsilcore.TypeRef("System.Array", [$.Single]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.TerrainData */ 

(function TerrainData$Members () {
  var $, $thisType;
  function TerrainData__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.TerrainData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      TerrainData__ctor
    );

    $.Field({Static:false, Public:true }, "Vertices", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:true }, "TextureCoords", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:true }, "Normals", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:true }, "Indices", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.Terrain */ 

(function Terrain$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.BufferCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.TerrainData)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.Objects.GlObject)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.RiftGL.Objects.Camera)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Random)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.RiftGL.Objects.HeightMap)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.UInt16))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.UInt16))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm02.RiftGL.Objects.Vector))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.RiftGL.Objects.Vector)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Single))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Single))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.RiftGL.Objects.Crate)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.RiftGL.Objects.Terrain_$l$gc__DisplayClassa)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm01.System.UInt16))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Random"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.UInt16")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("RiftGL.Objects.Vector")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Single")]), null))) ();
  };

  function Terrain__ctor () {
    this.Buffers = new ($T00())();
    this.TerrainData = new ($T01())();
    $T02().prototype._ctor.call(this);
  };

  function Terrain_BuildTerrain (seed, w, rFactor, camera) {
    this.Terrain$Random$value = $S00().Construct(seed);
    this.Terrain$Width$value = (w | 0);
    this.Terrain$scanDepth$value = 80;
    this.Terrain$terrainMul$value = 1;
    this.Terrain$textureMul$value = 0.25;
    this.Terrain$heightMul$value = 10;
    this.fogColor = JSIL.Array.New($T04(), 4);
    this.fogColor[0] = 0.75;
    this.fogColor[1] = 0.9;
    this.fogColor[2] = 1;
    this.fogColor[3] = 1;
    this.Terrain$HeightMap$value = null;
    this.GlObject$Size$value = Math.fround(Math.sqrt(((((+(this.Terrain$Width$value) * +this.Terrain$terrainMul$value) * +(this.Terrain$Width$value)) * +this.Terrain$terrainMul$value) + (((+(this.Terrain$Width$value) * +this.Terrain$terrainMul$value) * +(this.Terrain$Width$value)) * +this.Terrain$terrainMul$value))));
    this.Terrain$HeightMap$value = (new ($T09())()).__Initialize__({
        Values: JSIL.Array.New($T04(), Math.imul(this.Terrain$Width$value, this.Terrain$Width$value))}
    );
    this.MakeTerrainPlasma(this.Terrain$HeightMap$value, this.Terrain$Width$value, rFactor);
    if (camera !== null) {
      this.InitShaders(camera);
      this.InitTexture(camera);
      this.CreateVertesArray();
      this.CreateIndices();
      this.InitBuffers(camera);
    }
  };

  function Terrain_CreateIndices () {
    var $temp00;
    var indices = $S01().Construct();
    var lineTriangles = $S01().Construct();

    for (var i = 0; i < (((this.Terrain$Width$value | 0) - 1) | 0); i = ((i + 1) | 0)) {
      $T0A().prototype.AddRange.call(lineTriangles, $T0B().$Cast(JSIL.Array.New($T0C(), [((((this.Terrain$Width$value | 0) + i) | 0) & 0xFFFF), (i & 0xFFFF), ((((((this.Terrain$Width$value | 0) + i) | 0) + 1) | 0) & 0xFFFF)])));
      $T0A().prototype.AddRange.call(lineTriangles, $T0B().$Cast(JSIL.Array.New($T0C(), [(i & 0xFFFF), ((((((this.Terrain$Width$value | 0) + i) | 0) + 1) | 0) & 0xFFFF), (((i + 1) | 0) & 0xFFFF)])));
    }

    for (i = 0; i < (((this.Terrain$Width$value | 0) - 1) | 0); i = ((i + 1) | 0)) {

      for (var a$0 = lineTriangles._items, i$0 = 0, l$0 = (lineTriangles._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var index = a$0[i$0];
        indices.Add((((index + Math.imul(i, this.Terrain$Width$value)) | 0) & 0xFFFF));
      }
    }
    this.TerrainData.Indices = $T0A().prototype.ToArray.call(indices);
  };

  function Terrain_CreateVertesArray () {
    var vertexBuffer = $S02().Construct();
    var textureBuffer = $S02().Construct();
    var textureU = +(this.Terrain$Width$value) * 0.1;
    var textureV = +(this.Terrain$Width$value) * 0.1;

    for (var i = 0; i < (this.Terrain$Width$value | 0); i = ((i + 1) | 0)) {

      for (var j = 0; j < (this.Terrain$Width$value | 0); j = ((j + 1) | 0)) {
        var scaleR = +((((+j + +this.GlObject$Position$value.X) % +(this.Terrain$Width$value)) / (+(this.Terrain$Width$value) - 1)));
        var scaleC = +((((+i + +this.GlObject$Position$value.Z) % +(this.Terrain$Width$value)) / (+(this.Terrain$Width$value) - 1)));
        var x = +((+(-+(this.Terrain$Width$value)) / 2)) + (scaleR * +(this.Terrain$Width$value));
        var y = +this.Terrain$HeightMap$value.HeightMap$Values$value[((Math.imul(i, this.Terrain$Width$value) + j) | 0)] * +this.Terrain$heightMul$value;
        var z = +((+(-+(this.Terrain$Width$value)) / 2)) + (scaleC * +(this.Terrain$Width$value));
        vertexBuffer.Add($S03().Construct(x, y, z));
        var v = textureV * scaleC;
        textureBuffer.Add($S03().Construct((textureU * scaleR), v, 0));
      }
    }
    var normals = $S02().Construct();

    for (i = 0; i < (((this.Terrain$Width$value | 0) - 1) | 0); i = ((i + 1) | 0)) {

      for (j = 0; j < (((this.Terrain$Width$value | 0) - 1) | 0); j = ((j + 1) | 0)) {
        var t0 = vertexBuffer.get_Item(((Math.imul(i, this.Terrain$Width$value) + j) | 0));
        var t = vertexBuffer.get_Item(((Math.imul(((i + 1) | 0), this.Terrain$Width$value) + j) | 0));
        var t2 = vertexBuffer.get_Item(((Math.imul(((i + 1) | 0), this.Terrain$Width$value) + ((j + 1) | 0)) | 0));
        var t3 = vertexBuffer.get_Item(((Math.imul(((i + 1) | 0), this.Terrain$Width$value) + ((j + 1) | 0)) | 0));
        var t4 = vertexBuffer.get_Item(((Math.imul(i, this.Terrain$Width$value) + ((j + 1) | 0)) | 0));
        var t5 = vertexBuffer.get_Item(((Math.imul(i, this.Terrain$Width$value) + j) | 0));
        var norm0 = $T0E().op_ExclusiveOr(
          $T0E().op_Subtraction(t0, t), 
          $T0E().op_Subtraction(t, t2)
        );
        var norm = $T0E().op_ExclusiveOr(
          $T0E().op_Subtraction(t3, t4), 
          $T0E().op_Subtraction(t4, t5)
        );
        $T0D().prototype.AddRange.call(normals, JSIL.Array.New($T0E(), [norm0, norm]));
      }
    }
    var finalNormals = $S02().Construct();

    for (i = 0; i < (this.Terrain$Width$value | 0); i = ((i + 1) | 0)) {

      for (j = 0; j < (this.Terrain$Width$value | 0); j = ((j + 1) | 0)) {
        var finalNormal = $S04().Construct();
        if (!((j === 0) || (i === 0))) {
          var vector = normals.get_Item(((((i - 1) | 0) + Math.imul(((j - 1) | 0), this.Terrain$Width$value)) | 0));
          var vector2 = normals.get_Item(((((((i - 1) | 0) + Math.imul(((j - 1) | 0), this.Terrain$Width$value)) | 0) + 1) | 0));
          finalNormal = $T0E().op_Addition(finalNormal, $T0E().op_Addition(vector, vector2));
        }
        if (!((i === 0) || (j === (((this.Terrain$Width$value | 0) - 1) | 0)))) {
          var vector3 = normals.get_Item(((Math.imul(((i - 1) | 0), 3) + Math.imul(j, this.Terrain$Width$value)) | 0));
          finalNormal = $T0E().op_Addition(finalNormal, vector3);
        }
        if (!((i === (((this.Terrain$Width$value | 0) - 1) | 0)) || (j === (((this.Terrain$Width$value | 0) - 1) | 0)))) {
          vector = normals.get_Item(((Math.imul(i, 3) + Math.imul(j, this.Terrain$Width$value)) | 0));
          vector2 = normals.get_Item(((((Math.imul(i, 3) + Math.imul(j, this.Terrain$Width$value)) | 0) + 1) | 0));
          finalNormal = $T0E().op_Addition(finalNormal, $T0E().op_Addition(vector, vector2));
        }
        if (!((i === (((this.Terrain$Width$value | 0) - 1) | 0)) || (j === 0))) {
          vector3 = normals.get_Item(((Math.imul(i, 3) + Math.imul(((j - 1) | 0), this.Terrain$Width$value)) | 0));
          finalNormal = $T0E().op_Addition(finalNormal, vector3);
        }
        finalNormal.Normalize();
        finalNormals.Add(finalNormal);
      }
    }
    var vertexDataBuffer = $S05().Construct();
    var normalsDataBuffer = $S05().Construct();
    var textureDataBuffer = $S05().Construct();

    for (i = 0; i < (this.Terrain$Width$value | 0); i = ((i + 1) | 0)) {

      for (j = 0; j < (this.Terrain$Width$value | 0); j = ((j + 1) | 0)) {
        var vertex = vertexBuffer.get_Item(((j + Math.imul(i, this.Terrain$Width$value)) | 0));
        var texture = textureBuffer.get_Item(((j + Math.imul(i, this.Terrain$Width$value)) | 0));
        var normal = finalNormals.get_Item(((j + Math.imul(i, this.Terrain$Width$value)) | 0));
        $T0F().prototype.AddRange.call(textureDataBuffer, $T10().$Cast(JSIL.Array.New($T04(), [texture.X, texture.Y])));
        $T0F().prototype.AddRange.call(normalsDataBuffer, $T10().$Cast(JSIL.Array.New($T04(), [normal.X, normal.Y, normal.Z])));
        $T0F().prototype.AddRange.call(vertexDataBuffer, $T10().$Cast(JSIL.Array.New($T04(), [vertex.X, vertex.Y, vertex.Z])));
      }
    }
    this.TerrainData.Vertices = $T0F().prototype.ToArray.call(vertexDataBuffer);
    this.TerrainData.Normals = $T0F().prototype.ToArray.call(normalsDataBuffer);
    this.TerrainData.TextureCoords = $T0F().prototype.ToArray.call(textureDataBuffer);
  };

  function Terrain_DegreesToRadians (degrees) {
    return Math.fround(+((+degrees * 3.1415926535897931) / 180));
  };

  function Terrain_get_HeightMap () {
    return this.Terrain$HeightMap$value;
  };

  function Terrain_get_heightMul () {
    return this.Terrain$heightMul$value;
  };

  function Terrain_get_Random () {
    return this.Terrain$Random$value;
  };

  function Terrain_get_scanDepth () {
    return this.Terrain$scanDepth$value;
  };

  function Terrain_get_terrainMul () {
    return this.Terrain$terrainMul$value;
  };

  function Terrain_get_textureMul () {
    return this.Terrain$textureMul$value;
  };

  function Terrain_get_Width () {
    return this.Terrain$Width$value;
  };

  function Terrain_GetHeight (x, z) {
    if (+x < +this.GlObject$Position$value.X) {
      x = +this.GlObject$Position$value.X;
    }
    if (+z < +this.GlObject$Position$value.Z) {
      z = +this.GlObject$Position$value.Z;
    }
    var projCameraX = Math.fround(x) - +this.GlObject$Position$value.X;
    var projCameraZ = Math.fround(z) - +this.GlObject$Position$value.Z;
    var col0 = ((projCameraX) | 0);
    var row0 = ((projCameraZ) | 0);
    var col = ((col0 + 1) | 0);
    var row = ((row0 + 1) | 0);
    if (col > (this.Terrain$Width$value | 0)) {
      col = 0;
    }
    if (row > (this.Terrain$Width$value | 0)) {
      row = 0;
    }
    var h0 = +this.Terrain$heightMul$value * +this.Terrain$HeightMap$value.HeightMap$Values$value[((col0 + Math.imul(row0, this.Terrain$Width$value)) | 0)];
    var h = +this.Terrain$heightMul$value * +this.Terrain$HeightMap$value.HeightMap$Values$value[((col + Math.imul(row0, this.Terrain$Width$value)) | 0)];
    var h2 = +this.Terrain$heightMul$value * +this.Terrain$HeightMap$value.HeightMap$Values$value[((col + Math.imul(row, this.Terrain$Width$value)) | 0)];
    var h3 = +this.Terrain$heightMul$value * +this.Terrain$HeightMap$value.HeightMap$Values$value[((col0 + Math.imul(row, this.Terrain$Width$value)) | 0)];
    var tx = projCameraX - +col0;
    var ty = projCameraZ - +row0;
    var txty = tx * ty;
    return ((((h0 * (((1 - ty) - tx) + txty)) + (h * (tx - txty))) + (h2 * txty)) + (h3 * (ty - txty)));
  };

  function Terrain_GetMul () {
    return this.Terrain$terrainMul$value;
  };

  function Terrain_GetScanDepth () {
    return this.Terrain$scanDepth$value;
  };

  function Terrain_GetWidth () {
    return +(this.Terrain$Width$value);
  };

  function Terrain_InitBuffers (camera) {
    var gl = camera.GL;
    if (this.Buffers.VertexPositions === null) {
      this.Buffers.VertexPositions = gl.createBuffer();
      this.Buffers.VertexNormals = (camera.GL).createBuffer();
      this.Buffers.TextureCoords = (camera.GL).createBuffer();
    }
    var arg_1FA_2 = gl;
    arg_1FA_2.bindBuffer(gl.ARRAY_BUFFER, this.Buffers.VertexPositions);
    var arg_316_2 = gl;
    var arg_316_3 = gl.ARRAY_BUFFER;
    arg_316_2.bufferData(arg_316_3, this.TerrainData.Vertices, gl.STATIC_DRAW);
    var arg_3DE_2 = gl;
    arg_3DE_2.bindBuffer(camera.GL.ARRAY_BUFFER, this.Buffers.VertexNormals);
    var arg_504_2 = gl;
    var arg_504_3 = camera.GL.ARRAY_BUFFER;
    arg_504_2.bufferData(arg_504_3, this.TerrainData.Normals, camera.GL.STATIC_DRAW);
    var arg_5CC_2 = gl;
    arg_5CC_2.bindBuffer(camera.GL.ARRAY_BUFFER, this.Buffers.TextureCoords);
    var arg_6F2_2 = gl;
    var arg_6F2_3 = camera.GL.ARRAY_BUFFER;
    arg_6F2_2.bufferData(arg_6F2_3, this.TerrainData.TextureCoords, camera.GL.STATIC_DRAW);
    this.Buffers.Indices = gl.createBuffer();
    var arg_810_2 = gl;
    arg_810_2.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.Buffers.Indices);
    var arg_92C_2 = gl;
    var arg_92C_3 = gl.ELEMENT_ARRAY_BUFFER;
    arg_92C_2.bufferData(arg_92C_3, this.TerrainData.Indices, gl.STATIC_DRAW);
  };

  function Terrain_InitShaders (viewPort) {
    var fragmentShader = $T12().CompileShader(viewPort, "crate.fs");
    var vertexShader = $T12().CompileShader(viewPort, "crate.vs");
    $thisType.TerrainShaderProgram = (viewPort.GL).createProgram();
    (viewPort.GL).attachShader($thisType.TerrainShaderProgram, vertexShader);
    (viewPort.GL).attachShader($thisType.TerrainShaderProgram, fragmentShader);
    (viewPort.GL).linkProgram($thisType.TerrainShaderProgram);
    var arg_2BD_2 = viewPort.GL;
    if (!$T13().$Cast(arg_2BD_2.getProgramParameter($thisType.TerrainShaderProgram, viewPort.GL.LINK_STATUS))) {
      JSIL.GlobalNamespace.alert("Could not link shader");
    } else {
      (viewPort.GL).useProgram($thisType.TerrainShaderProgram);
      $thisType.TerrainShaderProgram.VertexPosition = (viewPort.GL).getAttribLocation($thisType.TerrainShaderProgram, "aVertexPosition");
      var arg_52C_2 = viewPort.GL;
      arg_52C_2.enableVertexAttribArray($thisType.TerrainShaderProgram.VertexPosition);
      $thisType.TerrainShaderProgram.VertexNormal = (viewPort.GL).getAttribLocation($thisType.TerrainShaderProgram, "aVertexNormal");
      var arg_6B4_2 = viewPort.GL;
      arg_6B4_2.enableVertexAttribArray($thisType.TerrainShaderProgram.VertexNormal);
      $thisType.TerrainShaderProgram.TextureCoord = (viewPort.GL).getAttribLocation($thisType.TerrainShaderProgram, "aTextureCoord");
      var arg_83C_2 = viewPort.GL;
      arg_83C_2.enableVertexAttribArray($thisType.TerrainShaderProgram.TextureCoord);
      $T14().Uniforms.ProjectionMatrix = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uPMatrix");
      $T14().Uniforms.ModelViewMatrix = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uMVMatrix");
      $T14().Uniforms.NormalMatrix = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uNMatrix");
      $T14().Uniforms.Sampler = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uSampler");
      $T14().Uniforms.UseLighting = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uUseLighting");
      $T14().Uniforms.AmbientColor = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uAmbientColor");
      $T14().Uniforms.LightingDirection = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uLightingDirection");
      $T14().Uniforms.DirectionalColor = (viewPort.GL).getUniformLocation($thisType.TerrainShaderProgram, "uDirectionalColor");
    }
  };

  function Terrain_InitTexture (camera, $exception) {
    var $closure0 = new ($T16())();
    $closure0.camera = camera;
    $closure0.$l$g4__this = this;
    this.TerrainTexture = ($closure0.camera.GL).createTexture();
    var arg_D9_0 = $closure0;
    arg_D9_0.imageElement = $T14().Document.createElement("img");
    $closure0.imageElement.onload = $T17().New($closure0, $T16().prototype.$lInitTexture$gb__9);
    try {
      var imageBytes = $T19().ReadAllBytes("ground.png");
      var objectUrl = JSIL.GlobalNamespace.JSIL.GetObjectURLForBytes(imageBytes, "image/png");
      $closure0.imageElement.src = objectUrl;
    } catch ($exception) {
      $T1A().WriteLine("Falling back to a second HTTP request for crate.png because Object URLs are not available");
      $closure0.imageElement.src = "Files/ground.png";
    }
  };

  function Terrain_MakeTerrainPlasma (field, size, rough) {
    var rectSize = (size | 0);
    var dh = +((+rectSize / 2));
    var r = Math.fround(Math.pow(2, (-1 * +rough)));
    field.HeightMap$Values$value[0] = 0;

    while (rectSize > 0) {

      for (var i = 0; i < (size | 0); i = ((i + rectSize) | 0)) {

        for (var j = 0; j < (size | 0); j = ((j + rectSize) | 0)) {
          var ni = ((((i + rectSize) | 0) % (size | 0)) | 0);
          var nj = ((((j + rectSize) | 0) % (size | 0)) | 0);
          var mi = ((i + ((rectSize / 2) | 0)) | 0);
          var mj = ((j + ((rectSize / 2) | 0)) | 0);
          field.HeightMap$Values$value[((mi + Math.imul(mj, size)) | 0)] = +(((((+field.HeightMap$Values$value[((i + Math.imul(j, size)) | 0)] + +field.HeightMap$Values$value[((ni + Math.imul(j, size)) | 0)]) + +field.HeightMap$Values$value[((i + Math.imul(nj, size)) | 0)]) + +field.HeightMap$Values$value[((ni + Math.imul(nj, size)) | 0)]) / 4)) + +this.RangedRandom(+((-dh / 2)), +((dh / 2)));
        }
      }

      for (i = 0; i < (size | 0); i = ((i + rectSize) | 0)) {

        for (j = 0; j < (size | 0); j = ((j + rectSize) | 0)) {
          ni = ((((i + rectSize) | 0) % (size | 0)) | 0);
          nj = ((((j + rectSize) | 0) % (size | 0)) | 0);
          mi = ((i + ((rectSize / 2) | 0)) | 0);
          mj = ((j + ((rectSize / 2) | 0)) | 0);
          var pmi = ((((((i - ((rectSize / 2) | 0)) | 0) + (size | 0)) | 0) % (size | 0)) | 0);
          var pmj = ((((((j - ((rectSize / 2) | 0)) | 0) + (size | 0)) | 0) % (size | 0)) | 0);
          field.HeightMap$Values$value[((mi + Math.imul(j, size)) | 0)] = +(((((+field.HeightMap$Values$value[((i + Math.imul(j, size)) | 0)] + +field.HeightMap$Values$value[((ni + Math.imul(j, size)) | 0)]) + +field.HeightMap$Values$value[((mi + Math.imul(pmj, size)) | 0)]) + +field.HeightMap$Values$value[((mi + Math.imul(mj, size)) | 0)]) / 4)) + +this.RangedRandom(+((-dh / 2)), +((dh / 2)));
          field.HeightMap$Values$value[((i + Math.imul(mj, size)) | 0)] = +(((((+field.HeightMap$Values$value[((i + Math.imul(j, size)) | 0)] + +field.HeightMap$Values$value[((i + Math.imul(nj, size)) | 0)]) + +field.HeightMap$Values$value[((pmi + Math.imul(mj, size)) | 0)]) + +field.HeightMap$Values$value[((mi + Math.imul(mj, size)) | 0)]) / 4)) + +this.RangedRandom(+((-dh / 2)), +((dh / 2)));
        }
      }
      rectSize = ((rectSize / 2) | 0);
      dh *= r;
    }
    this.NormalizeTerrain(field, size);
  };

  function Terrain_NormalizeTerrain (field, size) {
    var maxVal = +field.HeightMap$Values$value[0];
    var minVal = +field.HeightMap$Values$value[0];

    for (var i = 1; i < Math.imul(size, size); i = ((i + 1) | 0)) {
      if (+field.HeightMap$Values$value[i] > maxVal) {
        maxVal = +field.HeightMap$Values$value[i];
      } else if (+field.HeightMap$Values$value[i] < minVal) {
        minVal = +field.HeightMap$Values$value[i];
      }
    }
    if (maxVal > minVal) {
      var dh = maxVal - minVal;

      for (i = 0; i < Math.imul(size, size); i = ((i + 1) | 0)) {
        field.HeightMap$Values$value[i] = +(((+field.HeightMap$Values$value[i] - minVal) / dh));
      }
    }
  };

  function Terrain_OnDraw (camera) {
    var offsetX = +this.GlObject$Position$value.X;
    var offsetZ = +this.GlObject$Position$value.Z;
    var matrix = $T14().GLMatrix4.create();
    $T14().GLMatrix4.identity(matrix);
    matrix = $T14().GLMatrix4.translate(matrix, (this.GlObject$Position$value).ToFloatVector());
    $T14().Matrices.ModelView = $T1B().$Cast($T14().GLMatrix4.multiply($T14().Matrices.ModelView, matrix, $T14().Matrices.ModelView));
    var arg_2E0_2 = camera.GL;
    arg_2E0_2.bindBuffer(camera.GL.ARRAY_BUFFER, this.Buffers.VertexPositions);
    var arg_421_2 = camera.GL;
    arg_421_2.vertexAttribPointer(
      $thisType.TerrainShaderProgram.VertexPosition, 
      3, 
      camera.GL.FLOAT, 
      false, 
      0, 
      0
    );
    var arg_4EE_2 = camera.GL;
    arg_4EE_2.bindBuffer(camera.GL.ARRAY_BUFFER, this.Buffers.VertexNormals);
    var arg_62F_2 = camera.GL;
    arg_62F_2.vertexAttribPointer(
      $thisType.TerrainShaderProgram.VertexNormal, 
      3, 
      camera.GL.FLOAT, 
      false, 
      0, 
      0
    );
    var arg_6FC_2 = camera.GL;
    arg_6FC_2.bindBuffer(camera.GL.ARRAY_BUFFER, this.Buffers.TextureCoords);
    var arg_83D_2 = camera.GL;
    arg_83D_2.vertexAttribPointer(
      $thisType.TerrainShaderProgram.TextureCoord, 
      2, 
      camera.GL.FLOAT, 
      false, 
      0, 
      0
    );
    var arg_8F5_2 = camera.GL;
    arg_8F5_2.activeTexture(camera.GL.TEXTURE0);
    var arg_9BD_2 = camera.GL;
    arg_9BD_2.bindTexture(camera.GL.TEXTURE_2D, this.TerrainTexture);
    (camera.GL).uniform1i($T14().Uniforms.Sampler, 0);
    (camera.GL).uniformMatrix4fv($T14().Uniforms.ProjectionMatrix, false, $T14().Matrices.Projection);
    (camera.GL).uniformMatrix4fv($T14().Uniforms.ModelViewMatrix, false, $T14().Matrices.ModelView);
    $T14().GLMatrix4.toInverseMat3($T14().Matrices.ModelView, $T14().Matrices.Normal);
    $T14().GLMatrix3.transpose($T14().Matrices.Normal);
    (camera.GL).uniformMatrix3fv($T14().Uniforms.NormalMatrix, false, $T14().Matrices.Normal);
    var arg_D98_2 = camera.GL;
    arg_D98_2.bindBuffer(camera.GL.ELEMENT_ARRAY_BUFFER, this.Buffers.Indices);
    var arg_ED0_2 = camera.GL;
    var arg_ED0_3 = camera.GL.TRIANGLES;
    var arg_ED0_4 = (this.TerrainData.Indices.length | 0);
    arg_ED0_2.drawElements(arg_ED0_3, arg_ED0_4, camera.GL.UNSIGNED_SHORT, 0);
  };

  function Terrain_RangedRandom (v1, v2) {
    return (+v1 + ((+v2 - +v1) * Math.fround((this.Terrain$Random$value).NextDouble())));
  };

  function Terrain_set_HeightMap (value) {
    this.Terrain$HeightMap$value = value;
  };

  function Terrain_set_heightMul (value) {
    this.Terrain$heightMul$value = +value;
  };

  function Terrain_set_Random (value) {
    this.Terrain$Random$value = value;
  };

  function Terrain_set_scanDepth (value) {
    this.Terrain$scanDepth$value = +value;
  };

  function Terrain_set_terrainMul (value) {
    this.Terrain$terrainMul$value = +value;
  };

  function Terrain_set_textureMul (value) {
    this.Terrain$textureMul$value = +value;
  };

  function Terrain_set_Width (value) {
    this.Terrain$Width$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("RiftGL.Objects.GlObject"), 
      Name: "RiftGL.Objects.Terrain", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Terrain__ctor
    );

    $.Method({Static:false, Public:true }, "BuildTerrain", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Single, $asm02.TypeRef("RiftGL.Objects.Camera")
        ]), 
      Terrain_BuildTerrain
    );

    $.Method({Static:false, Public:true }, "CreateIndices", 
      JSIL.MethodSignature.Void, 
      Terrain_CreateIndices
    );

    $.Method({Static:false, Public:true }, "CreateVertesArray", 
      JSIL.MethodSignature.Void, 
      Terrain_CreateVertesArray
    );

    $.Method({Static:true , Public:true }, "DegreesToRadians", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      Terrain_DegreesToRadians
    );

    $.Method({Static:false, Public:true }, "get_HeightMap", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.HeightMap")), 
      Terrain_get_HeightMap
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_heightMul", 
      JSIL.MethodSignature.Return($.Single), 
      Terrain_get_heightMul
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Random", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Random")), 
      Terrain_get_Random
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_scanDepth", 
      JSIL.MethodSignature.Return($.Single), 
      Terrain_get_scanDepth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_terrainMul", 
      JSIL.MethodSignature.Return($.Single), 
      Terrain_get_terrainMul
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_textureMul", 
      JSIL.MethodSignature.Return($.Single), 
      Terrain_get_textureMul
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Terrain_get_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetHeight", 
      new JSIL.MethodSignature($.Single, [$.Double, $.Double]), 
      Terrain_GetHeight
    );

    $.Method({Static:false, Public:true }, "GetMul", 
      JSIL.MethodSignature.Return($.Single), 
      Terrain_GetMul
    );

    $.Method({Static:false, Public:true }, "GetScanDepth", 
      JSIL.MethodSignature.Return($.Single), 
      Terrain_GetScanDepth
    );

    $.Method({Static:false, Public:true }, "GetWidth", 
      JSIL.MethodSignature.Return($.Single), 
      Terrain_GetWidth
    );

    $.Method({Static:false, Public:true }, "InitBuffers", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      Terrain_InitBuffers
    );

    $.Method({Static:false, Public:true }, "InitShaders", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      Terrain_InitShaders
    );

    $.Method({Static:false, Public:false}, "InitTexture", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      Terrain_InitTexture
    );

    $.Method({Static:false, Public:false}, "MakeTerrainPlasma", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("RiftGL.Objects.HeightMap"), $.Int32, 
          $.Single
        ]), 
      Terrain_MakeTerrainPlasma
    );

    $.Method({Static:false, Public:false}, "NormalizeTerrain", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("RiftGL.Objects.HeightMap"), $.Int32]), 
      Terrain_NormalizeTerrain
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDraw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      Terrain_OnDraw
    );

    $.Method({Static:false, Public:false}, "RangedRandom", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single]), 
      Terrain_RangedRandom
    );

    $.Method({Static:false, Public:true }, "set_HeightMap", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.HeightMap")), 
      Terrain_set_HeightMap
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_heightMul", 
      JSIL.MethodSignature.Action($.Single), 
      Terrain_set_heightMul
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Random", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Random")), 
      Terrain_set_Random
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_scanDepth", 
      JSIL.MethodSignature.Action($.Single), 
      Terrain_set_scanDepth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_terrainMul", 
      JSIL.MethodSignature.Action($.Single), 
      Terrain_set_terrainMul
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_textureMul", 
      JSIL.MethodSignature.Action($.Single), 
      Terrain_set_textureMul
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      Terrain_set_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "Buffers", $asm02.TypeRef("RiftGL.Objects.BufferCollection")); 
    $.Field({Static:false, Public:true }, "TerrainData", $asm02.TypeRef("RiftGL.Objects.TerrainData")); 
    $.Field({Static:false, Public:true }, "fogColor", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:false}, "TerrainTexture", $.Object); 
    $.Field({Static:true , Public:true }, "TerrainShaderProgram", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:false, Public:false}, "Terrain$HeightMap$value", $asm02.TypeRef("RiftGL.Objects.HeightMap"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Terrain$Random$value", $asm01.TypeRef("System.Random"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Terrain$Width$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Terrain$terrainMul$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Terrain$heightMul$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Terrain$scanDepth$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Terrain$textureMul$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "HeightMap", $asm02.TypeRef("RiftGL.Objects.HeightMap"));

    $.Property({Static:false, Public:false}, "Random", $asm01.TypeRef("System.Random"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:false}, "terrainMul", $.Single);

    $.Property({Static:false, Public:false}, "heightMul", $.Single);

    $.Property({Static:false, Public:false}, "scanDepth", $.Single);

    $.Property({Static:false, Public:false}, "textureMul", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.Terrain+<>c__DisplayClassa */ 

(function $l$gc__DisplayClassa$Members () {
  var $, $thisType;
  function $l$gc__DisplayClassa__ctor () {
  };

  function $l$gc__DisplayClassa_$lInitTexture$gb__9 () {
    (this.camera).UploadTexture(this.$l$g4__this.TerrainTexture, this.imageElement);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.Terrain+<>c__DisplayClassa", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa__ctor
    );

    $.Method({Static:false, Public:true }, "$lInitTexture$gb__9", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa_$lInitTexture$gb__9
    );

    $.Field({Static:false, Public:true }, "imageElement", $.Object); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm02.TypeRef("RiftGL.Objects.Terrain")); 
    $.Field({Static:false, Public:true }, "camera", $asm02.TypeRef("RiftGL.Objects.Camera")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class RiftGL.Objects.GlTexture */ 

(function GlTexture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.RiftGL.Objects.GlTexture_$l$gc__DisplayClass9)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Console)) ();
  };

  function GlTexture__ctor () {
  };

  function GlTexture_get_Texture () {
    return this.GlTexture$Texture$value;
  };

  function GlTexture_LoadTexture (viewPort, uri, $exception) {
    var $closure0 = new ($T03())();
    $closure0.viewPort = viewPort;
    $closure0.result = new $thisType();
    var arg_7C_0 = $closure0.result;
    arg_7C_0.GlTexture$Texture$value = ($closure0.viewPort.GL).createTexture();
    var arg_EA_0 = $closure0;
    arg_EA_0.imageElement = $T00().Document.createElement("img");
    $closure0.imageElement.onload = $T04().New($closure0, $T03().prototype.$lLoadTexture$gb__8);
    try {
      var imageBytes = $T06().ReadAllBytes("crate.png");
      var objectUrl = JSIL.GlobalNamespace.JSIL.GetObjectURLForBytes(imageBytes, "image/png");
      $closure0.imageElement.src = objectUrl;
    } catch ($exception) {
      $T08().WriteLine("Falling back to a second HTTP request for crate.png because Object URLs are not available");
      $closure0.imageElement.src = "Files/crate.png";
    }
    return $closure0.result;
  };

  function GlTexture_set_Texture (value) {
    this.GlTexture$Texture$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.GlTexture", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GlTexture__ctor
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($.Object), 
      GlTexture_get_Texture
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "LoadTexture", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("RiftGL.View.ViewPort"), $.String]), 
      GlTexture_LoadTexture
    );

    $.Method({Static:false, Public:true }, "set_Texture", 
      JSIL.MethodSignature.Action($.Object), 
      GlTexture_set_Texture
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GlTexture$Texture$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Texture", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.GlTexture+<>c__DisplayClass9 */ 

(function $l$gc__DisplayClass9$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.GlTexture)) ();
  };

  function $l$gc__DisplayClass9__ctor () {
  };

  function $l$gc__DisplayClass9_$lLoadTexture$gb__8 () {
    (this.viewPort).UploadTexture(this.result.GlTexture$Texture$value, this.imageElement);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.GlTexture+<>c__DisplayClass9", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass9__ctor
    );

    $.Method({Static:false, Public:true }, "$lLoadTexture$gb__8", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass9_$lLoadTexture$gb__8
    );

    $.Field({Static:false, Public:true }, "result", $asm02.TypeRef("RiftGL.Objects.GlTexture")); 
    $.Field({Static:false, Public:true }, "imageElement", $.Object); 
    $.Field({Static:false, Public:true }, "viewPort", $asm02.TypeRef("RiftGL.View.ViewPort")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class RiftGL.Objects.Vector */ 

(function Vector$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [$asm02.TypeRef("RiftGL.Objects.Vector")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [$asm02.TypeRef("RiftGL.Objects.Vector"), $asm01.TypeRef("System.Single")]))) ();
  };

  function Vector__ctor$00 () {
  };

  function Vector__ctor$01 (x, y, z) {
    this.X = +x;
    this.Y = +y;
    this.Z = +z;
  };

  function Vector__ctor$02 (vector) {
    this.X = +vector.X;
    this.Y = +vector.Y;
    this.Z = +vector.Z;
  };

  function Vector_Angle (normal) {
    return Math.fround(Math.acos($thisType.op_Modulus(this, normal)));
  };

  function Vector_CrossProduct (vector) {
    return $S00().Construct(((+this.Y * +vector.Z) - (+this.Z * +vector.Y)), ((+this.Z * +vector.X) - (+this.X * +vector.Z)), ((+this.X * +vector.Y) - (+this.Y * +vector.X)));
  };

  function Vector_DotProduct (vector) {
    return (((+this.X * +vector.X) + (+this.Y * +vector.Y)) + (+this.Z * +vector.Z));
  };

  function Vector_Length () {
    return Math.fround(Math.sqrt((((+this.X * +this.X) + (+this.Y * +this.Y)) + (+this.Z * +this.Z))));
  };

  function Vector_Normalize () {
    var result = $thisType.op_Division(this, this.Length());
    this.X = +result.X;
    this.Y = +result.Y;
    this.Z = +result.Z;
  };

  function Vector_op_Addition (x, y) {
    return $S00().Construct((+x.X + +y.X), (+x.Y + +y.Y), (+x.Z + +y.Z));
  };

  function Vector_op_BitwiseOr (x, length) {
    var result = $S01().Construct(x);
    return $S02().CallStatic($thisType, "op_Multiply", null, result, +((+length / +x.Length())));
  };

  function Vector_op_Division (x, y) {
    var reciprical = +((1 / +y));
    var result = $S01().Construct(x);
    result.X *= reciprical;
    result.Y *= reciprical;
    result.Z *= reciprical;
    return result;
  };

  function Vector_op_Equality (x, y) {
    return (!(!$thisType.op_Inequality(x, null) || 
        !$thisType.op_Inequality(y, null) || 
        ((Math.abs((+x.X - +y.X))) >= 0.001) || 
        ((Math.abs((+x.Y - +y.Y))) >= 0.001)) && ((Math.abs((+x.Z - +y.Z))) < 0.001));
  };

  function Vector_op_ExclusiveOr (x, y) {
    return $S00().Construct(((+x.Y * +y.Z) - (+x.Z * +y.Y)), ((+x.Z * +y.X) - (+x.X * +y.Z)), ((+x.X * +y.Y) - (+x.Y * +y.X)));
  };

  function Vector_op_Inequality (x, y) {
    return !$thisType.op_Equality(x, y);
  };

  function Vector_op_LogicalNot (x) {
    return x.Length();
  };

  function Vector_op_Modulus (x, y) {
    return (((+x.X * +y.X) + (+x.Y * +y.Y)) + (+x.Z * +y.Z));
  };

  function Vector_op_Multiply$03 (x, y) {
    var result = $S01().Construct(x);
    result.X *= +y.X;
    result.Y *= +y.Y;
    result.Z *= +y.Z;
    return result;
  };

  function Vector_op_Multiply$04 (x, y) {
    var result = $S01().Construct(x);
    result.X *= +y;
    result.Y *= +y;
    result.Z *= +y;
    return result;
  };

  function Vector_op_Subtraction (x, y) {
    return $S00().Construct((+x.X - +y.X), (+x.Y - +y.Y), (+x.Z - +y.Z));
  };

  function Vector_Reflection (normal) {
    var unitVector = $thisType.op_BitwiseOr(this, 1);
    return $S02().CallStatic($thisType, "op_Multiply", null, 
      $thisType.op_Subtraction(unitVector, $S02().CallStatic($thisType, "op_Multiply", null, 
          $S02().CallStatic($thisType, "op_Multiply", null, normal, 2), 
          $thisType.op_Modulus(unitVector, normal)
        )), 
      this.Length()
    );
  };

  function Vector_ToFloatVector () {
    return JSIL.Array.New($T00(), [this.X, this.Y, this.Z]);
  };

  function Vector_UnitVector () {
    return $thisType.op_Division(this, this.Length());
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.Vector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Vector__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Vector__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      Vector__ctor$02
    );

    $.Method({Static:false, Public:true }, "Angle", 
      new JSIL.MethodSignature($.Single, [$.Type]), 
      Vector_Angle
    );

    $.Method({Static:false, Public:true }, "CrossProduct", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector_CrossProduct
    );

    $.Method({Static:false, Public:true }, "DotProduct", 
      new JSIL.MethodSignature($.Single, [$.Type]), 
      Vector_DotProduct
    );

    $.Method({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single), 
      Vector_Length
    );

    $.Method({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Void, 
      Vector_Normalize
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector_op_BitwiseOr
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector_op_Division
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector_op_ExclusiveOr
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_LogicalNot", 
      new JSIL.MethodSignature($.Single, [$.Type]), 
      Vector_op_LogicalNot
    );

    $.Method({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector_op_Modulus
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector_op_Multiply$03
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector_op_Multiply$04
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector_op_Subtraction
    );

    $.Method({Static:false, Public:true }, "Reflection", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector_Reflection
    );

    $.Method({Static:false, Public:true }, "ToFloatVector", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single])), 
      Vector_ToFloatVector
    );

    $.Method({Static:false, Public:true }, "UnitVector", 
      JSIL.MethodSignature.Return($.Type), 
      Vector_UnitVector
    );

    $.Field({Static:false, Public:true }, "X", $.Single); 
    $.Field({Static:false, Public:true }, "Y", $.Single); 
    $.Field({Static:false, Public:true }, "Z", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Objects.World */ 

(function World$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.RiftGL.Objects.Camera)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.RiftGL.Objects.Terrain)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.RiftGL.Objects.Vector)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.RiftGL.Objects.Crate)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.RiftGL.Objects.Player)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.RiftGL.Objects.Gui)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.RiftGL.Objects.Inventory)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.RiftGL.Objects.GlObject)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Environment)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.RiftGL.Objects.RiftRepository)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.RiftGL.Objects.MapCallback)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.RiftGL.Page)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.RiftGL.View.AudioSystem)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.RiftGL.Objects.Audio)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function World__ctor (camera) {
    this.World$Camera$value = camera;
    this.World$Terrain$value = (new ($T01())()).__Initialize__({
        Position: $S00().Construct(+((+(-+32) / 2)), 0, +((+(-+32) / 2)))}
    );
    this.World$Crate$value = (new ($T03())()).__Initialize__({
        Position: $S00().Construct(0, 0, 3), 
        Size: 1}
    );
    (this.World$Crate$value).InitTexture(camera);
    (this.World$Crate$value).InitShaders(camera);
    (this.World$Terrain$value).BuildTerrain(1, 32, 1, camera);
    this.World$Player$value = new ($T04())();
    this.World$Gui$value = new ($T05())();
    (this.World$Player$value).AttachTo(this.World$Terrain$value);
    (this.World$Player$value).SetCamera(this.World$Camera$value);
    (this.World$Player$value).SetTerrain(this.World$Terrain$value);
    this.World$timeStart$value = 300;
    this.World$timeEnd$value = 0;
    this.World$Gui$value.Gui$CurrentTime$value = +this.World$timeStart$value;
    this.World$Gui$value.Gui$EnemiesLeft$value = 0;
  };

  function World_Animate (deltaTime) {
    var $temp00;
    var terrainHeight = +(this.World$Terrain$value).GetHeight(
      (this.World$Camera$value).get_Location().X, 
      (this.World$Camera$value).get_Location().Z
    );
    if (+(this.World$Camera$value).get_Location().Y < (terrainHeight + +this.World$Player$value.GlObject$Size$value)) {
      this.World$Camera$value.Location.Y = terrainHeight + +this.World$Player$value.GlObject$Size$value;
    }
    this.World$Player$value.GlObject$Position$value = (this.World$Camera$value).get_Location();
    terrainHeight = +(this.World$Terrain$value).GetHeight(this.World$Crate$value.GlObject$Position$value.X, this.World$Crate$value.GlObject$Position$value.Z);
    if (+this.World$Crate$value.GlObject$Position$value.Y < (terrainHeight + +this.World$Crate$value.GlObject$Size$value)) {
      this.World$Crate$value.GlObject$Position$value.Y = terrainHeight + +this.World$Crate$value.GlObject$Size$value;
    }
    (this.World$Terrain$value).Animate(deltaTime);
    this.World$Gui$value.Gui$CurrentTime$value = +this.World$timeStart$value - +this.World$timeElapsed$value;
    if (!this.gameDone) {
      ($temp00 = +this.World$timeElapsed$value + +deltaTime, 
        this.World$timeElapsed$value = +$temp00, 
        $temp00);
    } else {
      this.World$timeElapsed$value = +this.World$timeStart$value;
    }
  };

  function World_Draw (camera) {
    $T09().GLMatrix4.translate($T09().Matrices.ModelView, $T09().Matrices.ModelView, JSIL.Array.New($T07(), [camera.get_Location().X, camera.get_Location().Y, camera.get_Location().Z]));
    (this.World$Terrain$value).Draw(camera);
    (this.World$Crate$value).Draw(camera);
  };

  function World_get_AudioSystem () {
    return this.World$AudioSystem$value;
  };

  function World_get_Camera () {
    return this.World$Camera$value;
  };

  function World_get_Crate () {
    return this.World$Crate$value;
  };

  function World_get_Gui () {
    return this.World$Gui$value;
  };

  function World_get_Player () {
    return this.World$Player$value;
  };

  function World_get_Terrain () {
    return this.World$Terrain$value;
  };

  function World_get_timeElapsed () {
    return this.World$timeElapsed$value;
  };

  function World_get_timeEnd () {
    return this.World$timeEnd$value;
  };

  function World_get_timeStart () {
    return this.World$timeStart$value;
  };

  function World_get_WorldSound () {
    return this.World$WorldSound$value;
  };

  function World_LoadWorld (worldMap, camera) {
    (this.World$Terrain$value).InitBuffers(camera);
  };

  function World_Prepare () {
    (this.World$Camera$value.GL).clearColor(this.World$Terrain$value.fogColor[0], this.World$Terrain$value.fogColor[1], this.World$Terrain$value.fogColor[2], this.World$Terrain$value.fogColor[3]);
    var terrain2D = $S00().Construct(this.World$Terrain$value.GlObject$Position$value.X, 0, this.World$Terrain$value.GlObject$Position$value.Z);
    var camera2D = $S00().Construct((this.World$Camera$value).get_Location().X, 0, (this.World$Camera$value).get_Location().Z);
    if ((Math.abs(($T02().op_Subtraction(terrain2D, camera2D)).Length())) > +((+(this.World$Terrain$value.Terrain$Width$value) / 4))) {
      this.RequestMapUpdate();
    }
    (this.World$Terrain$value).Prepare();
    (this.World$Crate$value).Prepare();
  };

  function World_RequestMapUpdate () {
    var now = ($T0D().get_TickCount() | 0);
    if (((now - (this.MapRequestSent | 0)) | 0) > 15000) {
      this.MapRequestSent = ($T0D().get_TickCount() | 0);
      var repository = new ($T0E())("lpmud.local", "user", "password");
      repository.LoadMap(
        (this.World$Camera$value).get_Location(), 
        128, 
        $T0F().New($T10(), $T10().LoadWorldCallback)
      );
    }
  };

  function World_set_AudioSystem (value) {
    this.World$AudioSystem$value = value;
  };

  function World_set_Camera (value) {
    this.World$Camera$value = value;
  };

  function World_set_Crate (value) {
    this.World$Crate$value = value;
  };

  function World_set_Gui (value) {
    this.World$Gui$value = value;
  };

  function World_set_Player (value) {
    this.World$Player$value = value;
  };

  function World_set_Terrain (value) {
    this.World$Terrain$value = value;
  };

  function World_set_timeElapsed (value) {
    this.World$timeElapsed$value = +value;
  };

  function World_set_timeEnd (value) {
    this.World$timeEnd$value = +value;
  };

  function World_set_timeStart (value) {
    this.World$timeStart$value = +value;
  };

  function World_set_WorldSound (value) {
    this.World$WorldSound$value = value;
  };

  function World_UnloadWorld () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.Objects.World", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      World__ctor
    );

    $.Method({Static:false, Public:true }, "Animate", 
      JSIL.MethodSignature.Action($.Single), 
      World_Animate
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      World_Draw
    );

    $.Method({Static:false, Public:true }, "get_AudioSystem", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.View.AudioSystem")), 
      World_get_AudioSystem
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Camera", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Camera")), 
      World_get_Camera
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Crate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Crate")), 
      World_get_Crate
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Gui", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Gui")), 
      World_get_Gui
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Player", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Player")), 
      World_get_Player
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Terrain", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Terrain")), 
      World_get_Terrain
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_timeElapsed", 
      JSIL.MethodSignature.Return($.Single), 
      World_get_timeElapsed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_timeEnd", 
      JSIL.MethodSignature.Return($.Single), 
      World_get_timeEnd
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_timeStart", 
      JSIL.MethodSignature.Return($.Single), 
      World_get_timeStart
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_WorldSound", 
      JSIL.MethodSignature.Return($asm02.TypeRef("RiftGL.Objects.Audio")), 
      World_get_WorldSound
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "LoadWorld", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("RiftGL.Objects.Camera")]), 
      World_LoadWorld
    )
      .Parameter(0, "worldMap", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:false, Public:true }, "Prepare", 
      JSIL.MethodSignature.Void, 
      World_Prepare
    );

    $.Method({Static:false, Public:false}, "RequestMapUpdate", 
      JSIL.MethodSignature.Void, 
      World_RequestMapUpdate
    );

    $.Method({Static:false, Public:true }, "set_AudioSystem", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.View.AudioSystem")), 
      World_set_AudioSystem
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Camera", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Camera")), 
      World_set_Camera
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Crate", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Crate")), 
      World_set_Crate
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Gui", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Gui")), 
      World_set_Gui
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Player", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Player")), 
      World_set_Player
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Terrain", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Terrain")), 
      World_set_Terrain
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_timeElapsed", 
      JSIL.MethodSignature.Action($.Single), 
      World_set_timeElapsed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_timeEnd", 
      JSIL.MethodSignature.Action($.Single), 
      World_set_timeEnd
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_timeStart", 
      JSIL.MethodSignature.Action($.Single), 
      World_set_timeStart
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_WorldSound", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Audio")), 
      World_set_WorldSound
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "UnloadWorld", 
      JSIL.MethodSignature.Void, 
      World_UnloadWorld
    );

    $.Field({Static:false, Public:true }, "MapRequestSent", $.Int32); 
    $.Field({Static:false, Public:false}, "gameDone", $.Boolean); 
    $.Field({Static:false, Public:false}, "World$Terrain$value", $asm02.TypeRef("RiftGL.Objects.Terrain"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$Crate$value", $asm02.TypeRef("RiftGL.Objects.Crate"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$Camera$value", $asm02.TypeRef("RiftGL.Objects.Camera"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$Player$value", $asm02.TypeRef("RiftGL.Objects.Player"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$AudioSystem$value", $asm02.TypeRef("RiftGL.View.AudioSystem"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$WorldSound$value", $asm02.TypeRef("RiftGL.Objects.Audio"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$Gui$value", $asm02.TypeRef("RiftGL.Objects.Gui"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$timeStart$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$timeElapsed$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "World$timeEnd$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Terrain", $asm02.TypeRef("RiftGL.Objects.Terrain"));

    $.Property({Static:false, Public:true }, "Crate", $asm02.TypeRef("RiftGL.Objects.Crate"));

    $.Property({Static:false, Public:true }, "Camera", $asm02.TypeRef("RiftGL.Objects.Camera"));

    $.Property({Static:false, Public:true }, "Player", $asm02.TypeRef("RiftGL.Objects.Player"));

    $.Property({Static:false, Public:true }, "AudioSystem", $asm02.TypeRef("RiftGL.View.AudioSystem"));

    $.Property({Static:false, Public:true }, "WorldSound", $asm02.TypeRef("RiftGL.Objects.Audio"));

    $.Property({Static:false, Public:true }, "Gui", $asm02.TypeRef("RiftGL.Objects.Gui"));

    $.Property({Static:false, Public:true }, "timeStart", $.Single);

    $.Property({Static:false, Public:true }, "timeElapsed", $.Single);

    $.Property({Static:false, Public:true }, "timeEnd", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.Page */ 

(function Page$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.System.Collections.Generic.Queue$b1.Of($asm02.RiftGL.Objects.ModelUpdate))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Environment)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.RiftGL.Objects.Camera)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.RiftGL.Objects.World)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.RiftGL.View.ViewPort)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.RiftGL.Objects.GlObject)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.RiftGL.Objects.ModelUpdate)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.RiftGL.Objects.ModelUpdate_UpdateType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.RiftGL.Objects.CubeData)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.RiftGL.Objects.Vector)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.RiftGL.Objects.Gui)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Action$b1.Of($asm01.System.Object))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.RiftGL.Objects.RiftRepository)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.RiftGL.Objects.MapCallback)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.RiftGL.Objects.Map)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.RiftGL.Objects.HeightMap)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.RiftGL.Objects.Terrain)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Collections.Generic.Queue`1", [$asm02.TypeRef("RiftGL.Objects.ModelUpdate")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("RiftGL.Objects.Vector"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function Page_Animate () {
    var now = ($T03().get_TickCount() | 0);
    if (($thisType.LastTime | 0) !== 0) {
      var elapsed = +((+(now - ($thisType.LastTime | 0)) / 1000));
      if (elapsed > 0) {
        if (elapsed > 0.25) {
          elapsed = 0.25;
        }
        $thisType.Camera.Animate(elapsed);
        $thisType.World.Animate(elapsed);
        $thisType.Camera.Update();
      }
    }
    $thisType.LastTime = now;
  };

  function Page_DrawScene () {
    $thisType.Camera.GL.viewport(0, 0, $thisType.Canvas.width, $thisType.Canvas.height);
    var arg_291_2 = $thisType.Camera.GL.COLOR_BUFFER_BIT;
    $thisType.Camera.GL.clear(arg_291_2 | $thisType.Camera.GL.DEPTH_BUFFER_BIT);
    $thisType.World.Draw($thisType.Camera);
    var lighting = $T00().$Cast($thisType.Document.getElementById("lighting").checked);
    $thisType.Camera.GL.uniform1i($T08().Uniforms.UseLighting, (
        lighting
           ? 1
           : 0)
    );
    if (lighting) {
      $thisType.Camera.DrawLighting();
    }
    $thisType.Gui.Draw($thisType.Camera);
  };

  function Page_HandleKeys () {
    if ($thisType.HeldKeys[33]) {
      $thisType.Camera.Velocity.Y += 2;
    }
    if ($thisType.HeldKeys[34]) {
      $thisType.Camera.Velocity.Y -= 2;
    }
    if (!(!$thisType.HeldKeys[37] && !$thisType.HeldKeys[65])) {
      $thisType.Camera.RotationVelocity -= 50;
    }
    if (!(!$thisType.HeldKeys[39] && !$thisType.HeldKeys[68])) {
      $thisType.Camera.RotationVelocity += 50;
    }
    if (!(!$thisType.HeldKeys[38] && !$thisType.HeldKeys[87])) {
      $thisType.Camera.Velocity.Z += -2;
    }
    if (!(!$thisType.HeldKeys[40] && !$thisType.HeldKeys[83])) {
      $thisType.Camera.Velocity.Z += 2;
    }
    if ($thisType.HeldKeys[81]) {
      $thisType.Camera.Velocity.X += -1;
    }
    if ($thisType.HeldKeys[69]) {
      $thisType.Camera.Velocity.X += 1;
    }
    if ($thisType.HeldKeys[107]) {
      $thisType.mouseSensitivity += 0.05;
    }
    if ($thisType.HeldKeys[109]) {
      $thisType.mouseSensitivity -= 0.05;
      if (+$thisType.mouseSensitivity < 0.05) {
        $thisType.mouseSensitivity = 0.05;
      }
    }
  };

  function Page_HandleUpdates () {
    if (($thisType.UpdateEvents.get_Count() | 0) > 0) {
      var update = $T01().prototype.Dequeue.call($thisType.UpdateEvents);
      if (update.ModelUpdate$Type$value === $T0B().Map) {
        $thisType.World.LoadWorld(update.ModelUpdate$World$value, $thisType.Camera);
        $thisType.World.MapRequestSent = 0;
      }
    }
  };

  function Page_InitBuffers () {
    var arg_12B_3 = $thisType.Camera.GL.ARRAY_BUFFER;
    $thisType.Camera.GL.bindBuffer(arg_12B_3, $T08().Buffers.VertexPositions = $thisType.Camera.GL.createBuffer());
    var arg_25C_3 = $thisType.Camera.GL.ARRAY_BUFFER;
    $thisType.Camera.GL.bufferData(arg_25C_3, $T0C().Positions, $thisType.Camera.GL.STATIC_DRAW);
    var arg_38C_3 = $thisType.Camera.GL.ARRAY_BUFFER;
    $thisType.Camera.GL.bindBuffer(arg_38C_3, $T08().Buffers.VertexNormals = $thisType.Camera.GL.createBuffer());
    var arg_4BD_3 = $thisType.Camera.GL.ARRAY_BUFFER;
    $thisType.Camera.GL.bufferData(arg_4BD_3, $T0C().Normals, $thisType.Camera.GL.STATIC_DRAW);
    var arg_5ED_3 = $thisType.Camera.GL.ARRAY_BUFFER;
    $thisType.Camera.GL.bindBuffer(arg_5ED_3, $T08().Buffers.TextureCoords = $thisType.Camera.GL.createBuffer());
    var arg_71E_3 = $thisType.Camera.GL.ARRAY_BUFFER;
    $thisType.Camera.GL.bufferData(arg_71E_3, $T0C().TexCoords, $thisType.Camera.GL.STATIC_DRAW);
    var arg_84E_3 = $thisType.Camera.GL.ELEMENT_ARRAY_BUFFER;
    $thisType.Camera.GL.bindBuffer(arg_84E_3, $T08().Buffers.Indices = $thisType.Camera.GL.createBuffer());
    var arg_97F_3 = $thisType.Camera.GL.ELEMENT_ARRAY_BUFFER;
    $thisType.Camera.GL.bufferData(arg_97F_3, $T0C().Indices, $thisType.Camera.GL.STATIC_DRAW);
  };

  function Page_InitGL ($exception) {
    var gl = null;
    try {
      gl = $thisType.Canvas.getContext("experimental-webgl");
    } catch ($exception) {
    }
    if (gl) {
      $thisType.Camera = (new ($T05())()).__Initialize__({
          GL: gl, 
          Location: $S01().Construct(0, 0, -3)}
      );
      $T08().Document = $thisType.Document;
      $T08().Canvas = $thisType.Canvas;
      $thisType.World = new ($T06())($thisType.Camera);
      $thisType.Gui = new ($T0F())();
      $T10().WriteLine("Initialized WebGL");
      var result = true;
    } else {
      JSIL.GlobalNamespace.alert("Could not initialize WebGL");
      result = false;
    }
    return result;
  };

  function Page_InitMatrices () {
    $thisType.Camera.InitMatrices($thisType.Canvas);
  };

  function Page_InitShaders () {
  };

  function Page_InitTexture () {
  };

  function Page_Load () {
    $thisType.Document = JSIL.GlobalNamespace.document;
    $thisType.Canvas = $thisType.Document.getElementById("canvas");
    if ($thisType.InitGL()) {
      $thisType.InitMatrices();
      $thisType.InitShaders();
      $thisType.InitBuffers();
      $thisType.InitTexture();
      $thisType.Document.onkeydown = $T11().New($thisType, $thisType.OnKeyDown);
      $thisType.Document.onkeyup = $T11().New($thisType, $thisType.OnKeyUp);
      $thisType.Document.onmousemove = $T11().New($thisType, $thisType.OnMouseMove);
      $thisType.Tick();
      $thisType.LoadWorld();
    }
  };

  function Page_LoadWorld () {
    var repository = new ($T12())("lpmud.local", "user", "password");
    repository.LoadMap($thisType.World.World$Player$value.GlObject$Position$value, 128, $T13().New($thisType, $thisType.LoadWorldCallback));
  };

  function Page_LoadWorldCallback (data) {
    var arg_A2_0 = $thisType.World.World$Terrain$value.Terrain$HeightMap$value;
    arg_A2_0.HeightMap$Values$value = $T17().$Cast(data.HeightMap);
    var arg_142_0 = $thisType.World.World$Terrain$value;
    arg_142_0.Terrain$Width$value = $T02().$Cast(data.Columns);
    var arg_1E7_0 = $thisType.World.World$Terrain$value.GlObject$Position$value;
    arg_1E7_0.X = $T04().$Cast(data.X);
    var arg_28B_0 = $thisType.World.World$Terrain$value.GlObject$Position$value;
    arg_28B_0.Z = $T04().$Cast(data.Z);
    $thisType.World.World$Terrain$value.CreateVertesArray();
    $thisType.World.World$Terrain$value.CreateIndices();
    $T01().prototype.Enqueue.call($thisType.UpdateEvents, (new ($T0A())()).__Initialize__({
          World: data, 
          Type: $T0B().Map}
      ));
  };

  function Page_OnKeyDown (e) {
    $thisType.HeldKeys[$T02().$Cast(e.keyCode)] = 1;
  };

  function Page_OnKeyUp (e) {
    $thisType.HeldKeys[$T02().$Cast(e.keyCode)] = 0;
  };

  function Page_OnMouseMove (e) {
  };

  function Page_OnPrepare () {
    $thisType.Camera.GL.clearColor(0, 0, 0, 1);
    $thisType.Camera.GL.enable($thisType.Camera.GL.DEPTH_TEST);
  };

  function Page_Tick ($exception) {
    JSIL.GlobalNamespace.requestAnimFrame($T18().New($thisType, $thisType.Tick));
    $thisType.HandleKeys();
    $thisType.HandleUpdates();
    $thisType.OnPrepare();
    $thisType.World.Prepare();
    $thisType.Gui.Prepare();
    $thisType.Animate();
    try {
      $thisType.DrawScene();
    } catch ($exception) {
    }
  };

  JSIL.MakeStaticClass("RiftGL.Page", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Animate", 
      JSIL.MethodSignature.Void, 
      Page_Animate
    );

    $.Method({Static:true , Public:true }, "DrawScene", 
      JSIL.MethodSignature.Void, 
      Page_DrawScene
    );

    $.Method({Static:true , Public:true }, "HandleKeys", 
      JSIL.MethodSignature.Void, 
      Page_HandleKeys
    );

    $.Method({Static:true , Public:false}, "HandleUpdates", 
      JSIL.MethodSignature.Void, 
      Page_HandleUpdates
    );

    $.Method({Static:true , Public:true }, "InitBuffers", 
      JSIL.MethodSignature.Void, 
      Page_InitBuffers
    );

    $.Method({Static:true , Public:true }, "InitGL", 
      JSIL.MethodSignature.Return($.Boolean), 
      Page_InitGL
    );

    $.Method({Static:true , Public:true }, "InitMatrices", 
      JSIL.MethodSignature.Void, 
      Page_InitMatrices
    );

    $.Method({Static:true , Public:true }, "InitShaders", 
      JSIL.MethodSignature.Void, 
      Page_InitShaders
    );

    $.Method({Static:true , Public:true }, "InitTexture", 
      JSIL.MethodSignature.Void, 
      Page_InitTexture
    );

    $.Method({Static:true , Public:true }, "Load", 
      JSIL.MethodSignature.Void, 
      Page_Load
    );

    $.Method({Static:true , Public:true }, "LoadWorld", 
      JSIL.MethodSignature.Void, 
      Page_LoadWorld
    );

    $.Method({Static:true , Public:true }, "LoadWorldCallback", 
      JSIL.MethodSignature.Action($asm02.TypeRef("RiftGL.Objects.Map")), 
      Page_LoadWorldCallback
    );

    $.Method({Static:true , Public:true }, "OnKeyDown", 
      JSIL.MethodSignature.Action($.Object), 
      Page_OnKeyDown
    )
      .Parameter(0, "e", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:true , Public:true }, "OnKeyUp", 
      JSIL.MethodSignature.Action($.Object), 
      Page_OnKeyUp
    )
      .Parameter(0, "e", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:true , Public:true }, "OnMouseMove", 
      JSIL.MethodSignature.Action($.Object), 
      Page_OnMouseMove
    )
      .Parameter(0, "e", function (_) {
          _.Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute"))
        });

    $.Method({Static:true , Public:false}, "OnPrepare", 
      JSIL.MethodSignature.Void, 
      Page_OnPrepare
    );

    $.Method({Static:true , Public:true }, "Tick", 
      JSIL.MethodSignature.Void, 
      Page_Tick
    );

    $.Field({Static:true , Public:true }, "Document", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:true , Public:true }, "Canvas", $.Object)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.DynamicAttribute")); 
    $.Field({Static:true , Public:true }, "HeldKeys", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm01.System.Boolean, 255);
      }); 
    $.Field({Static:true , Public:true }, "LastTime", $.Int32, 0); 
    $.Field({Static:true , Public:true }, "Camera", $asm02.TypeRef("RiftGL.Objects.Camera")); 
    $.Field({Static:true , Public:true }, "World", $asm02.TypeRef("RiftGL.Objects.World")); 
    $.Field({Static:true , Public:true }, "Gui", $asm02.TypeRef("RiftGL.Objects.Gui")); 
    $.Field({Static:true , Public:false}, "UpdateEvents", $asm03.TypeRef("System.Collections.Generic.Queue`1", [$asm02.TypeRef("RiftGL.Objects.ModelUpdate")])); 
    $.Field({Static:true , Public:false}, "oldX", $.Single); 
    $.Field({Static:true , Public:false}, "oldY", $.Single); 
    $.Field({Static:true , Public:false}, "mouseSensitivity", $.Single, 10); 
    function Page__cctor () {
      $thisType.HeldKeys = JSIL.Array.New($T00(), 255);
      $thisType.LastTime = 0;
      $thisType.UpdateEvents = $S00().Construct();
      $thisType.mouseSensitivity = 10;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Page__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class RiftGL.View.AudioSystem */ 

(function AudioSystem$Members () {
  var $, $thisType;
  function AudioSystem__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "RiftGL.View.AudioSystem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AudioSystem__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

